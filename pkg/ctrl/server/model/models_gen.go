// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/chaos-mesh/chaos-mesh/api/v1alpha1"
	"k8s.io/api/core/v1"
)

type Cgroups struct {
	Raw    string         `json:"raw"`
	CPU    *CgroupsCPU    `json:"cpu,omitempty"`
	Memory *CgroupsMemory `json:"memory,omitempty"`
}

type CgroupsCPU struct {
	Quota  int `json:"quota"`
	Period int `json:"period"`
}

type CgroupsMemory struct {
	Limit int64 `json:"limit"`
}

type Fd struct {
	Fd     string `json:"fd"`
	Target string `json:"target"`
}

type KillProcessResult struct {
	Pid     string `json:"pid"`
	Command string `json:"command"`
}

type Logger struct {
}

type MutablePod struct {
	Pod           *v1.Pod              `json:"pod"`
	KillProcesses []*KillProcessResult `json:"killProcesses,omitempty"`
	CleanTcs      []string             `json:"cleanTcs,omitempty"`
	CleanIptables []string             `json:"cleanIptables,omitempty"`
}

type Mutation struct {
}

type Namespace struct {
	Ns              string                      `json:"ns"`
	Component       []*v1.Pod                   `json:"component,omitempty"`
	Pod             []*v1.Pod                   `json:"pod,omitempty"`
	Stresschaos     []*v1alpha1.StressChaos     `json:"stresschaos,omitempty"`
	Iochaos         []*v1alpha1.IOChaos         `json:"iochaos,omitempty"`
	Podiochaos      []*v1alpha1.PodIOChaos      `json:"podiochaos,omitempty"`
	Httpchaos       []*v1alpha1.HTTPChaos       `json:"httpchaos,omitempty"`
	Podhttpchaos    []*v1alpha1.PodHttpChaos    `json:"podhttpchaos,omitempty"`
	Networkchaos    []*v1alpha1.NetworkChaos    `json:"networkchaos,omitempty"`
	Podnetworkchaos []*v1alpha1.PodNetworkChaos `json:"podnetworkchaos,omitempty"`
}

type PodSelectorInput struct {
	Namespaces          []string       `json:"namespaces,omitempty"`
	Nodes               []string       `json:"nodes,omitempty"`
	Pods                map[string]any `json:"pods,omitempty"`
	NodeSelectors       map[string]any `json:"nodeSelectors,omitempty"`
	FieldSelectors      map[string]any `json:"fieldSelectors,omitempty"`
	LabelSelectors      map[string]any `json:"labelSelectors,omitempty"`
	AnnotationSelectors map[string]any `json:"annotationSelectors,omitempty"`
	PodPhaseSelectors   []string       `json:"podPhaseSelectors,omitempty"`
}

type PodStressChaos struct {
	StressChaos   *v1alpha1.StressChaos `json:"stressChaos"`
	Pod           *v1.Pod               `json:"pod"`
	Cgroups       *Cgroups              `json:"cgroups"`
	ProcessStress []*ProcessStress      `json:"processStress,omitempty"`
}

type Process struct {
	Pod     *v1.Pod `json:"pod"`
	Pid     string  `json:"pid"`
	Command string  `json:"command"`
	Fds     []*Fd   `json:"fds,omitempty"`
}

type ProcessStress struct {
	Process *Process `json:"process"`
	Cgroup  string   `json:"cgroup"`
}

type Query struct {
}

type Component string

const (
	ComponentManager   Component = "MANAGER"
	ComponentDaemon    Component = "DAEMON"
	ComponentDashboard Component = "DASHBOARD"
	ComponentDNSServer Component = "DNSSERVER"
)

var AllComponent = []Component{
	ComponentManager,
	ComponentDaemon,
	ComponentDashboard,
	ComponentDNSServer,
}

func (e Component) IsValid() bool {
	switch e {
	case ComponentManager, ComponentDaemon, ComponentDashboard, ComponentDNSServer:
		return true
	}
	return false
}

func (e Component) String() string {
	return string(e)
}

func (e *Component) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Component(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Component", str)
	}
	return nil
}

func (e Component) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
