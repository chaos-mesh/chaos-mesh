// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/chaos-mesh/chaos-mesh/api/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// BlockChaosLister helps list Blockchaos.
// All objects returned here must be treated as read-only.
type BlockChaosLister interface {
	// List lists all Blockchaos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apiv1alpha1.BlockChaos, err error)
	// Blockchaos returns an object that can list and get Blockchaos.
	Blockchaos(namespace string) BlockChaosNamespaceLister
	BlockChaosListerExpansion
}

// blockChaosLister implements the BlockChaosLister interface.
type blockChaosLister struct {
	listers.ResourceIndexer[*apiv1alpha1.BlockChaos]
}

// NewBlockChaosLister returns a new BlockChaosLister.
func NewBlockChaosLister(indexer cache.Indexer) BlockChaosLister {
	return &blockChaosLister{listers.New[*apiv1alpha1.BlockChaos](indexer, apiv1alpha1.Resource("blockchaos"))}
}

// Blockchaos returns an object that can list and get Blockchaos.
func (s *blockChaosLister) Blockchaos(namespace string) BlockChaosNamespaceLister {
	return blockChaosNamespaceLister{listers.NewNamespaced[*apiv1alpha1.BlockChaos](s.ResourceIndexer, namespace)}
}

// BlockChaosNamespaceLister helps list and get Blockchaos.
// All objects returned here must be treated as read-only.
type BlockChaosNamespaceLister interface {
	// List lists all Blockchaos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apiv1alpha1.BlockChaos, err error)
	// Get retrieves the BlockChaos from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*apiv1alpha1.BlockChaos, error)
	BlockChaosNamespaceListerExpansion
}

// blockChaosNamespaceLister implements the BlockChaosNamespaceLister
// interface.
type blockChaosNamespaceLister struct {
	listers.ResourceIndexer[*apiv1alpha1.BlockChaos]
}
