// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	apiv1alpha1 "github.com/chaos-mesh/chaos-mesh/api/v1alpha1"
	scheme "github.com/chaos-mesh/chaos-mesh/pkg/client/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// JvmchaosGetter has a method to return a JVMChaosInterface.
// A group's client should implement this interface.
type JvmchaosGetter interface {
	Jvmchaos(namespace string) JVMChaosInterface
}

// JVMChaosInterface has methods to work with JVMChaos resources.
type JVMChaosInterface interface {
	Create(ctx context.Context, jVMChaos *apiv1alpha1.JVMChaos, opts v1.CreateOptions) (*apiv1alpha1.JVMChaos, error)
	Update(ctx context.Context, jVMChaos *apiv1alpha1.JVMChaos, opts v1.UpdateOptions) (*apiv1alpha1.JVMChaos, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, jVMChaos *apiv1alpha1.JVMChaos, opts v1.UpdateOptions) (*apiv1alpha1.JVMChaos, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1alpha1.JVMChaos, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1alpha1.JVMChaosList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1alpha1.JVMChaos, err error)
	JVMChaosExpansion
}

// jvmchaos implements JVMChaosInterface
type jvmchaos struct {
	*gentype.ClientWithList[*apiv1alpha1.JVMChaos, *apiv1alpha1.JVMChaosList]
}

// newJvmchaos returns a Jvmchaos
func newJvmchaos(c *ApiV1alpha1Client, namespace string) *jvmchaos {
	return &jvmchaos{
		gentype.NewClientWithList[*apiv1alpha1.JVMChaos, *apiv1alpha1.JVMChaosList](
			"jvmchaos",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1alpha1.JVMChaos { return &apiv1alpha1.JVMChaos{} },
			func() *apiv1alpha1.JVMChaosList { return &apiv1alpha1.JVMChaosList{} },
		),
	}
}
