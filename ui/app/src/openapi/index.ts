/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Chaos Mesh Dashboard API
 * Swagger for Chaos Mesh Dashboard. If you encounter any problems with API, please click on the issues link below to report.
 * OpenAPI spec version: 2.5
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../api/http'
import type {
  DeleteArchivesParams,
  DeleteArchivesSchedulesParams,
  DeleteArchivesWorkflowsParams,
  DeleteExperimentsParams,
  DeleteExperimentsUidParams,
  DeleteSchedulesParams,
  DeleteTemplatesStatuschecksStatuscheckParams,
  GetArchivesParams,
  GetArchivesSchedulesParams,
  GetArchivesWorkflowsParams,
  GetCommonAnnotationsParams,
  GetCommonLabelsParams,
  GetCommonPhysicalmachineAnnotationsParams,
  GetCommonPhysicalmachineLabelsParams,
  GetCommonRbacConfig200,
  GetCommonRbacConfigParams,
  GetEventsParams,
  GetEventsWorkflowUidParams,
  GetExperimentsParams,
  GetExperimentsStateParams,
  GetSchedulesParams,
  GetTemplatesStatuschecksParams,
  GetTemplatesStatuschecksStatuscheckParams,
  GetWorkflowsParams,
  GithubComChaosMeshChaosMeshPkgConfigChaosDashboardConfig,
  GithubComChaosMeshChaosMeshPkgCurlRequestForm,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchive,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchiveDetail,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesExperiment,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesExperimentDetail,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesPhysicalMachine,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesPod,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesSchedule,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesScheduleDetail,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplateBase,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplateDetail,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsMapStringSliceResponse,
  GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse,
  GithubComChaosMeshChaosMeshPkgDashboardCoreEvent,
  GithubComChaosMeshChaosMeshPkgDashboardCoreWorkflowDetail,
  GithubComChaosMeshChaosMeshPkgDashboardCoreWorkflowMeta,
  GithubComChaosMeshChaosMeshPkgStatusAllChaosStatus,
  PostExperiments200,
  PostExperimentsBody,
  V1alpha1PhysicalMachineSelectorSpec,
  V1alpha1PodSelectorSpec,
  V1alpha1Schedule,
  V1alpha1Template,
  V1alpha1TemplateBody,
  V1alpha1WorkflowBody,
} from './index.schemas'

/**
 * Delete the specified archived experiment.
 * @summary Delete the specified archived experiment.
 */
export const deleteArchives = (params: DeleteArchivesParams) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/archives`,
    method: 'DELETE',
    params,
  })
}

export const getDeleteArchivesMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArchives>>,
    TError,
    { params: DeleteArchivesParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArchives>>,
  TError,
  { params: DeleteArchivesParams },
  TContext
> => {
  const mutationKey = ['deleteArchives']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArchives>>, { params: DeleteArchivesParams }> = (
    props,
  ) => {
    const { params } = props ?? {}

    return deleteArchives(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArchivesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArchives>>>

export type DeleteArchivesMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete the specified archived experiment.
 */
export const useDeleteArchives = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteArchives>>,
      TError,
      { params: DeleteArchivesParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteArchives>>,
  TError,
  { params: DeleteArchivesParams },
  TContext
> => {
  const mutationOptions = getDeleteArchivesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get archived chaos experiments.
 * @summary Get archived chaos experiments.
 */
export const getArchives = (params?: GetArchivesParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchive[]>({
    url: `/archives`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetArchivesQueryKey = (params?: GetArchivesParams) => {
  return [`/archives`, ...(params ? [params] : [])] as const
}

export const getGetArchivesQueryOptions = <
  TData = Awaited<ReturnType<typeof getArchives>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchives>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetArchivesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArchives>>> = ({ signal }) => getArchives(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArchives>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArchivesQueryResult = NonNullable<Awaited<ReturnType<typeof getArchives>>>
export type GetArchivesQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetArchives<
  TData = Awaited<ReturnType<typeof getArchives>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetArchivesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchives>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchives>>,
          TError,
          Awaited<ReturnType<typeof getArchives>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchives<
  TData = Awaited<ReturnType<typeof getArchives>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchives>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchives>>,
          TError,
          Awaited<ReturnType<typeof getArchives>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchives<
  TData = Awaited<ReturnType<typeof getArchives>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchives>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get archived chaos experiments.
 */

export function useGetArchives<
  TData = Awaited<ReturnType<typeof getArchives>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchives>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetArchivesQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete the specified archived experiment.
 * @summary Delete the specified archived experiment.
 */
export const deleteArchivesUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/archives/${uid}`,
    method: 'DELETE',
  })
}

export const getDeleteArchivesUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteArchivesUid>>, TError, { uid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteArchivesUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['deleteArchivesUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArchivesUid>>, { uid: string }> = (props) => {
    const { uid } = props ?? {}

    return deleteArchivesUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArchivesUidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArchivesUid>>>

export type DeleteArchivesUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete the specified archived experiment.
 */
export const useDeleteArchivesUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteArchivesUid>>, TError, { uid: string }, TContext>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteArchivesUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getDeleteArchivesUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the archived chaos experiment's detail by uid.
 * @summary Get an archived chaos experiment.
 */
export const getArchivesUid = (uid: string, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchiveDetail>({
    url: `/archives/${uid}`,
    method: 'GET',
    signal,
  })
}

export const getGetArchivesUidQueryKey = (uid: string) => {
  return [`/archives/${uid}`] as const
}

export const getGetArchivesUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getArchivesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesUid>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetArchivesUidQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArchivesUid>>> = ({ signal }) => getArchivesUid(uid, signal)

  return { queryKey, queryFn, enabled: !!uid, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArchivesUid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArchivesUidQueryResult = NonNullable<Awaited<ReturnType<typeof getArchivesUid>>>
export type GetArchivesUidQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetArchivesUid<
  TData = Awaited<ReturnType<typeof getArchivesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesUid>>,
          TError,
          Awaited<ReturnType<typeof getArchivesUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesUid<
  TData = Awaited<ReturnType<typeof getArchivesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesUid>>,
          TError,
          Awaited<ReturnType<typeof getArchivesUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesUid<
  TData = Awaited<ReturnType<typeof getArchivesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get an archived chaos experiment.
 */

export function useGetArchivesUid<
  TData = Awaited<ReturnType<typeof getArchivesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetArchivesUidQueryOptions(uid, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete the specified archived schedule.
 * @summary Delete the specified archived schedule.
 */
export const deleteArchivesSchedules = (params: DeleteArchivesSchedulesParams) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/archives/schedules`,
    method: 'DELETE',
    params,
  })
}

export const getDeleteArchivesSchedulesMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArchivesSchedules>>,
    TError,
    { params: DeleteArchivesSchedulesParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArchivesSchedules>>,
  TError,
  { params: DeleteArchivesSchedulesParams },
  TContext
> => {
  const mutationKey = ['deleteArchivesSchedules']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArchivesSchedules>>,
    { params: DeleteArchivesSchedulesParams }
  > = (props) => {
    const { params } = props ?? {}

    return deleteArchivesSchedules(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArchivesSchedulesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArchivesSchedules>>>

export type DeleteArchivesSchedulesMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete the specified archived schedule.
 */
export const useDeleteArchivesSchedules = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteArchivesSchedules>>,
      TError,
      { params: DeleteArchivesSchedulesParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteArchivesSchedules>>,
  TError,
  { params: DeleteArchivesSchedulesParams },
  TContext
> => {
  const mutationOptions = getDeleteArchivesSchedulesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get archived schedule experiments.
 * @summary Get archived schedule experiments.
 */
export const getArchivesSchedules = (params?: GetArchivesSchedulesParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchive[]>({
    url: `/archives/schedules`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetArchivesSchedulesQueryKey = (params?: GetArchivesSchedulesParams) => {
  return [`/archives/schedules`, ...(params ? [params] : [])] as const
}

export const getGetArchivesSchedulesQueryOptions = <
  TData = Awaited<ReturnType<typeof getArchivesSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesSchedulesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedules>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetArchivesSchedulesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArchivesSchedules>>> = ({ signal }) =>
    getArchivesSchedules(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArchivesSchedules>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArchivesSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getArchivesSchedules>>>
export type GetArchivesSchedulesQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetArchivesSchedules<
  TData = Awaited<ReturnType<typeof getArchivesSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetArchivesSchedulesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedules>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesSchedules>>,
          TError,
          Awaited<ReturnType<typeof getArchivesSchedules>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesSchedules<
  TData = Awaited<ReturnType<typeof getArchivesSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesSchedulesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedules>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesSchedules>>,
          TError,
          Awaited<ReturnType<typeof getArchivesSchedules>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesSchedules<
  TData = Awaited<ReturnType<typeof getArchivesSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesSchedulesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedules>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get archived schedule experiments.
 */

export function useGetArchivesSchedules<
  TData = Awaited<ReturnType<typeof getArchivesSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesSchedulesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedules>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetArchivesSchedulesQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete the specified archived schedule.
 * @summary Delete the specified archived schedule.
 */
export const deleteArchivesSchedulesUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/archives/schedules/${uid}`,
    method: 'DELETE',
  })
}

export const getDeleteArchivesSchedulesUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArchivesSchedulesUid>>,
    TError,
    { uid: string },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<typeof deleteArchivesSchedulesUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['deleteArchivesSchedulesUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArchivesSchedulesUid>>, { uid: string }> = (
    props,
  ) => {
    const { uid } = props ?? {}

    return deleteArchivesSchedulesUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArchivesSchedulesUidMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArchivesSchedulesUid>>
>

export type DeleteArchivesSchedulesUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete the specified archived schedule.
 */
export const useDeleteArchivesSchedulesUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteArchivesSchedulesUid>>,
      TError,
      { uid: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteArchivesSchedulesUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getDeleteArchivesSchedulesUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the detail of an archived schedule experiment.
 * @summary Get the detail of an archived schedule experiment.
 */
export const getArchivesSchedulesUid = (uid: string, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchiveDetail>({
    url: `/archives/schedules/${uid}`,
    method: 'GET',
    signal,
  })
}

export const getGetArchivesSchedulesUidQueryKey = (uid: string) => {
  return [`/archives/schedules/${uid}`] as const
}

export const getGetArchivesSchedulesUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedulesUid>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetArchivesSchedulesUidQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArchivesSchedulesUid>>> = ({ signal }) =>
    getArchivesSchedulesUid(uid, signal)

  return { queryKey, queryFn, enabled: !!uid, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArchivesSchedulesUidQueryResult = NonNullable<Awaited<ReturnType<typeof getArchivesSchedulesUid>>>
export type GetArchivesSchedulesUidQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetArchivesSchedulesUid<
  TData = Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedulesUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
          TError,
          Awaited<ReturnType<typeof getArchivesSchedulesUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesSchedulesUid<
  TData = Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedulesUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
          TError,
          Awaited<ReturnType<typeof getArchivesSchedulesUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesSchedulesUid<
  TData = Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedulesUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the detail of an archived schedule experiment.
 */

export function useGetArchivesSchedulesUid<
  TData = Awaited<ReturnType<typeof getArchivesSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesSchedulesUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetArchivesSchedulesUidQueryOptions(uid, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete the specified archived workflows.
 * @summary Delete the specified archived workflows.
 */
export const deleteArchivesWorkflows = (params: DeleteArchivesWorkflowsParams) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/archives/workflows`,
    method: 'DELETE',
    params,
  })
}

export const getDeleteArchivesWorkflowsMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArchivesWorkflows>>,
    TError,
    { params: DeleteArchivesWorkflowsParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArchivesWorkflows>>,
  TError,
  { params: DeleteArchivesWorkflowsParams },
  TContext
> => {
  const mutationKey = ['deleteArchivesWorkflows']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArchivesWorkflows>>,
    { params: DeleteArchivesWorkflowsParams }
  > = (props) => {
    const { params } = props ?? {}

    return deleteArchivesWorkflows(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArchivesWorkflowsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArchivesWorkflows>>>

export type DeleteArchivesWorkflowsMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete the specified archived workflows.
 */
export const useDeleteArchivesWorkflows = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteArchivesWorkflows>>,
      TError,
      { params: DeleteArchivesWorkflowsParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteArchivesWorkflows>>,
  TError,
  { params: DeleteArchivesWorkflowsParams },
  TContext
> => {
  const mutationOptions = getDeleteArchivesWorkflowsMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get archived workflow.
 * @summary Get archived workflow.
 */
export const getArchivesWorkflows = (params?: GetArchivesWorkflowsParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchive[]>({
    url: `/archives/workflows`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetArchivesWorkflowsQueryKey = (params?: GetArchivesWorkflowsParams) => {
  return [`/archives/workflows`, ...(params ? [params] : [])] as const
}

export const getGetArchivesWorkflowsQueryOptions = <
  TData = Awaited<ReturnType<typeof getArchivesWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesWorkflowsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflows>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetArchivesWorkflowsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArchivesWorkflows>>> = ({ signal }) =>
    getArchivesWorkflows(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArchivesWorkflows>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArchivesWorkflowsQueryResult = NonNullable<Awaited<ReturnType<typeof getArchivesWorkflows>>>
export type GetArchivesWorkflowsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetArchivesWorkflows<
  TData = Awaited<ReturnType<typeof getArchivesWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetArchivesWorkflowsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflows>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesWorkflows>>,
          TError,
          Awaited<ReturnType<typeof getArchivesWorkflows>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesWorkflows<
  TData = Awaited<ReturnType<typeof getArchivesWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesWorkflowsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflows>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesWorkflows>>,
          TError,
          Awaited<ReturnType<typeof getArchivesWorkflows>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesWorkflows<
  TData = Awaited<ReturnType<typeof getArchivesWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesWorkflowsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflows>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get archived workflow.
 */

export function useGetArchivesWorkflows<
  TData = Awaited<ReturnType<typeof getArchivesWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetArchivesWorkflowsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflows>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetArchivesWorkflowsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete the specified archived workflow.
 * @summary Delete the specified archived workflow.
 */
export const deleteArchivesWorkflowsUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/archives/workflows/${uid}`,
    method: 'DELETE',
  })
}

export const getDeleteArchivesWorkflowsUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArchivesWorkflowsUid>>,
    TError,
    { uid: string },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<typeof deleteArchivesWorkflowsUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['deleteArchivesWorkflowsUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArchivesWorkflowsUid>>, { uid: string }> = (
    props,
  ) => {
    const { uid } = props ?? {}

    return deleteArchivesWorkflowsUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArchivesWorkflowsUidMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArchivesWorkflowsUid>>
>

export type DeleteArchivesWorkflowsUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete the specified archived workflow.
 */
export const useDeleteArchivesWorkflowsUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteArchivesWorkflowsUid>>,
      TError,
      { uid: string },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteArchivesWorkflowsUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getDeleteArchivesWorkflowsUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the detail of an archived workflow.
 * @summary Get the detail of an archived workflow.
 */
export const getArchivesWorkflowsUid = (uid: string, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesArchiveDetail>({
    url: `/archives/workflows/${uid}`,
    method: 'GET',
    signal,
  })
}

export const getGetArchivesWorkflowsUidQueryKey = (uid: string) => {
  return [`/archives/workflows/${uid}`] as const
}

export const getGetArchivesWorkflowsUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflowsUid>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetArchivesWorkflowsUidQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArchivesWorkflowsUid>>> = ({ signal }) =>
    getArchivesWorkflowsUid(uid, signal)

  return { queryKey, queryFn, enabled: !!uid, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArchivesWorkflowsUidQueryResult = NonNullable<Awaited<ReturnType<typeof getArchivesWorkflowsUid>>>
export type GetArchivesWorkflowsUidQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetArchivesWorkflowsUid<
  TData = Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflowsUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
          TError,
          Awaited<ReturnType<typeof getArchivesWorkflowsUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesWorkflowsUid<
  TData = Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflowsUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
          TError,
          Awaited<ReturnType<typeof getArchivesWorkflowsUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArchivesWorkflowsUid<
  TData = Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflowsUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the detail of an archived workflow.
 */

export function useGetArchivesWorkflowsUid<
  TData = Awaited<ReturnType<typeof getArchivesWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getArchivesWorkflowsUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetArchivesWorkflowsUidQueryOptions(uid, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get the annotations of the pods in the specified namespace from Kubernetes cluster.
 * @summary Get the annotations of the pods in the specified namespace from Kubernetes cluster.
 */
export const getCommonAnnotations = (params: GetCommonAnnotationsParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsMapStringSliceResponse>({
    url: `/common/annotations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCommonAnnotationsQueryKey = (params: GetCommonAnnotationsParams) => {
  return [`/common/annotations`, ...(params ? [params] : [])] as const
}

export const getGetCommonAnnotationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonAnnotationsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonAnnotations>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonAnnotationsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonAnnotations>>> = ({ signal }) =>
    getCommonAnnotations(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonAnnotations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonAnnotationsQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonAnnotations>>>
export type GetCommonAnnotationsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonAnnotations<
  TData = Awaited<ReturnType<typeof getCommonAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonAnnotationsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonAnnotations>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonAnnotations>>,
          TError,
          Awaited<ReturnType<typeof getCommonAnnotations>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonAnnotations<
  TData = Awaited<ReturnType<typeof getCommonAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonAnnotationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonAnnotations>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonAnnotations>>,
          TError,
          Awaited<ReturnType<typeof getCommonAnnotations>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonAnnotations<
  TData = Awaited<ReturnType<typeof getCommonAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonAnnotationsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonAnnotations>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the annotations of the pods in the specified namespace from Kubernetes cluster.
 */

export function useGetCommonAnnotations<
  TData = Awaited<ReturnType<typeof getCommonAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonAnnotationsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonAnnotations>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonAnnotationsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get all namespaces which could inject chaos(explosion scope) from Kubernetes cluster.
 * @summary Get all namespaces which could inject chaos(explosion scope) from Kubernetes cluster.
 */
export const getCommonChaosAvailableNamespaces = (signal?: AbortSignal) => {
  return customInstance<string[]>({ url: `/common/chaos-available-namespaces`, method: 'GET', signal })
}

export const getGetCommonChaosAvailableNamespacesQueryKey = () => {
  return [`/common/chaos-available-namespaces`] as const
}

export const getGetCommonChaosAvailableNamespacesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonChaosAvailableNamespacesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>> = ({ signal }) =>
    getCommonChaosAvailableNamespaces(signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonChaosAvailableNamespacesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>
>
export type GetCommonChaosAvailableNamespacesQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonChaosAvailableNamespaces<
  TData = Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
          TError,
          Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonChaosAvailableNamespaces<
  TData = Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
          TError,
          Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonChaosAvailableNamespaces<
  TData = Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all namespaces which could inject chaos(explosion scope) from Kubernetes cluster.
 */

export function useGetCommonChaosAvailableNamespaces<
  TData = Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonChaosAvailableNamespaces>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonChaosAvailableNamespacesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get the config of Dashboard.
 * @summary Get the config of Dashboard.
 */
export const getCommonConfig = (signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgConfigChaosDashboardConfig>({
    url: `/common/config`,
    method: 'GET',
    signal,
  })
}

export const getGetCommonConfigQueryKey = () => {
  return [`/common/config`] as const
}

export const getGetCommonConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonConfig>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonConfigQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonConfig>>> = ({ signal }) => getCommonConfig(signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonConfig>>>
export type GetCommonConfigQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonConfig<
  TData = Awaited<ReturnType<typeof getCommonConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonConfig>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonConfig>>,
          TError,
          Awaited<ReturnType<typeof getCommonConfig>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonConfig<
  TData = Awaited<ReturnType<typeof getCommonConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonConfig>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonConfig>>,
          TError,
          Awaited<ReturnType<typeof getCommonConfig>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonConfig<
  TData = Awaited<ReturnType<typeof getCommonConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonConfig>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the config of Dashboard.
 */

export function useGetCommonConfig<
  TData = Awaited<ReturnType<typeof getCommonConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonConfig>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonConfigQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get all chaos kinds from Kubernetes cluster.
 * @summary Get all chaos kinds from Kubernetes cluster.
 */
export const getCommonKinds = (signal?: AbortSignal) => {
  return customInstance<string[]>({ url: `/common/kinds`, method: 'GET', signal })
}

export const getGetCommonKindsQueryKey = () => {
  return [`/common/kinds`] as const
}

export const getGetCommonKindsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonKinds>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonKinds>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonKindsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonKinds>>> = ({ signal }) => getCommonKinds(signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonKinds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonKindsQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonKinds>>>
export type GetCommonKindsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonKinds<
  TData = Awaited<ReturnType<typeof getCommonKinds>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonKinds>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonKinds>>,
          TError,
          Awaited<ReturnType<typeof getCommonKinds>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonKinds<
  TData = Awaited<ReturnType<typeof getCommonKinds>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonKinds>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonKinds>>,
          TError,
          Awaited<ReturnType<typeof getCommonKinds>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonKinds<
  TData = Awaited<ReturnType<typeof getCommonKinds>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonKinds>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all chaos kinds from Kubernetes cluster.
 */

export function useGetCommonKinds<
  TData = Awaited<ReturnType<typeof getCommonKinds>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonKinds>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonKindsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get the labels of the pods in the specified namespace from Kubernetes cluster.
 * @summary Get the labels of the pods in the specified namespace from Kubernetes cluster.
 */
export const getCommonLabels = (params: GetCommonLabelsParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsMapStringSliceResponse>({
    url: `/common/labels`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCommonLabelsQueryKey = (params: GetCommonLabelsParams) => {
  return [`/common/labels`, ...(params ? [params] : [])] as const
}

export const getGetCommonLabelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonLabelsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonLabels>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonLabelsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonLabels>>> = ({ signal }) =>
    getCommonLabels(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonLabels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonLabelsQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonLabels>>>
export type GetCommonLabelsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonLabels<
  TData = Awaited<ReturnType<typeof getCommonLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonLabelsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonLabels>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonLabels>>,
          TError,
          Awaited<ReturnType<typeof getCommonLabels>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonLabels<
  TData = Awaited<ReturnType<typeof getCommonLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonLabels>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonLabels>>,
          TError,
          Awaited<ReturnType<typeof getCommonLabels>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonLabels<
  TData = Awaited<ReturnType<typeof getCommonLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonLabelsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonLabels>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the labels of the pods in the specified namespace from Kubernetes cluster.
 */

export function useGetCommonLabels<
  TData = Awaited<ReturnType<typeof getCommonLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonLabelsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonLabels>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonLabelsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get all from Kubernetes cluster.
 * @deprecated
 * @summary Get all namespaces from Kubernetes cluster.
 */
export const getCommonNamespaces = (signal?: AbortSignal) => {
  return customInstance<string[]>({ url: `/common/namespaces`, method: 'GET', signal })
}

export const getGetCommonNamespacesQueryKey = () => {
  return [`/common/namespaces`] as const
}

export const getGetCommonNamespacesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonNamespaces>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonNamespacesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonNamespaces>>> = ({ signal }) =>
    getCommonNamespaces(signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonNamespaces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonNamespacesQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonNamespaces>>>
export type GetCommonNamespacesQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonNamespaces<
  TData = Awaited<ReturnType<typeof getCommonNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonNamespaces>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonNamespaces>>,
          TError,
          Awaited<ReturnType<typeof getCommonNamespaces>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonNamespaces<
  TData = Awaited<ReturnType<typeof getCommonNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonNamespaces>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonNamespaces>>,
          TError,
          Awaited<ReturnType<typeof getCommonNamespaces>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonNamespaces<
  TData = Awaited<ReturnType<typeof getCommonNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonNamespaces>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @deprecated
 * @summary Get all namespaces from Kubernetes cluster.
 */

export function useGetCommonNamespaces<
  TData = Awaited<ReturnType<typeof getCommonNamespaces>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonNamespaces>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonNamespacesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get the annotations of the physicalMachines in the specified namespace from Kubernetes cluster.
 * @summary Get the annotations of the physicalMachines in the specified namespace from Kubernetes cluster.
 */
export const getCommonPhysicalmachineAnnotations = (
  params: GetCommonPhysicalmachineAnnotationsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsMapStringSliceResponse>({
    url: `/common/physicalmachine-annotations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCommonPhysicalmachineAnnotationsQueryKey = (params: GetCommonPhysicalmachineAnnotationsParams) => {
  return [`/common/physicalmachine-annotations`, ...(params ? [params] : [])] as const
}

export const getGetCommonPhysicalmachineAnnotationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineAnnotationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonPhysicalmachineAnnotationsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>> = ({ signal }) =>
    getCommonPhysicalmachineAnnotations(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonPhysicalmachineAnnotationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>
>
export type GetCommonPhysicalmachineAnnotationsQueryError =
  GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonPhysicalmachineAnnotations<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineAnnotationsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
          TError,
          Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonPhysicalmachineAnnotations<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineAnnotationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
          TError,
          Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonPhysicalmachineAnnotations<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineAnnotationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the annotations of the physicalMachines in the specified namespace from Kubernetes cluster.
 */

export function useGetCommonPhysicalmachineAnnotations<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineAnnotationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineAnnotations>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonPhysicalmachineAnnotationsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get the labels of the physicalMachines in the specified namespace from Kubernetes cluster.
 * @summary Get the labels of the physicalMachines in the specified namespace from Kubernetes cluster.
 */
export const getCommonPhysicalmachineLabels = (params: GetCommonPhysicalmachineLabelsParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsMapStringSliceResponse>({
    url: `/common/physicalmachine-labels`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetCommonPhysicalmachineLabelsQueryKey = (params: GetCommonPhysicalmachineLabelsParams) => {
  return [`/common/physicalmachine-labels`, ...(params ? [params] : [])] as const
}

export const getGetCommonPhysicalmachineLabelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonPhysicalmachineLabelsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>> = ({ signal }) =>
    getCommonPhysicalmachineLabels(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonPhysicalmachineLabelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>
>
export type GetCommonPhysicalmachineLabelsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonPhysicalmachineLabels<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineLabelsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
          TError,
          Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonPhysicalmachineLabels<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
          TError,
          Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonPhysicalmachineLabels<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the labels of the physicalMachines in the specified namespace from Kubernetes cluster.
 */

export function useGetCommonPhysicalmachineLabels<
  TData = Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetCommonPhysicalmachineLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonPhysicalmachineLabels>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonPhysicalmachineLabelsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get physicalMachines from Kubernetes cluster.
 * @summary Get physicalMachines from Kubernetes cluster.
 */
export const postCommonPhysicalmachines = (
  v1alpha1PhysicalMachineSelectorSpec: V1alpha1PhysicalMachineSelectorSpec,
  signal?: AbortSignal,
) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesPhysicalMachine[]>({
    url: `/common/physicalmachines`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: v1alpha1PhysicalMachineSelectorSpec,
    signal,
  })
}

export const getPostCommonPhysicalmachinesMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommonPhysicalmachines>>,
    TError,
    { data: V1alpha1PhysicalMachineSelectorSpec },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommonPhysicalmachines>>,
  TError,
  { data: V1alpha1PhysicalMachineSelectorSpec },
  TContext
> => {
  const mutationKey = ['postCommonPhysicalmachines']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommonPhysicalmachines>>,
    { data: V1alpha1PhysicalMachineSelectorSpec }
  > = (props) => {
    const { data } = props ?? {}

    return postCommonPhysicalmachines(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostCommonPhysicalmachinesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommonPhysicalmachines>>
>
export type PostCommonPhysicalmachinesMutationBody = V1alpha1PhysicalMachineSelectorSpec
export type PostCommonPhysicalmachinesMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Get physicalMachines from Kubernetes cluster.
 */
export const usePostCommonPhysicalmachines = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommonPhysicalmachines>>,
      TError,
      { data: V1alpha1PhysicalMachineSelectorSpec },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommonPhysicalmachines>>,
  TError,
  { data: V1alpha1PhysicalMachineSelectorSpec },
  TContext
> => {
  const mutationOptions = getPostCommonPhysicalmachinesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get pods from Kubernetes cluster.
 * @summary Get pods from Kubernetes cluster.
 */
export const postCommonPods = (v1alpha1PodSelectorSpec: V1alpha1PodSelectorSpec, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesPod[]>({
    url: `/common/pods`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: v1alpha1PodSelectorSpec,
    signal,
  })
}

export const getPostCommonPodsMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommonPods>>,
    TError,
    { data: V1alpha1PodSelectorSpec },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommonPods>>,
  TError,
  { data: V1alpha1PodSelectorSpec },
  TContext
> => {
  const mutationKey = ['postCommonPods']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCommonPods>>, { data: V1alpha1PodSelectorSpec }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return postCommonPods(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostCommonPodsMutationResult = NonNullable<Awaited<ReturnType<typeof postCommonPods>>>
export type PostCommonPodsMutationBody = V1alpha1PodSelectorSpec
export type PostCommonPodsMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Get pods from Kubernetes cluster.
 */
export const usePostCommonPods = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommonPods>>,
      TError,
      { data: V1alpha1PodSelectorSpec },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommonPods>>,
  TError,
  { data: V1alpha1PodSelectorSpec },
  TContext
> => {
  const mutationOptions = getPostCommonPodsMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the rbac config according to the user's choice.
 * @summary Get the rbac config according to the user's choice.
 */
export const getCommonRbacConfig = (params?: GetCommonRbacConfigParams, signal?: AbortSignal) => {
  return customInstance<GetCommonRbacConfig200>({ url: `/common/rbac-config`, method: 'GET', params, signal })
}

export const getGetCommonRbacConfigQueryKey = (params?: GetCommonRbacConfigParams) => {
  return [`/common/rbac-config`, ...(params ? [params] : [])] as const
}

export const getGetCommonRbacConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommonRbacConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetCommonRbacConfigParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonRbacConfig>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommonRbacConfigQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonRbacConfig>>> = ({ signal }) =>
    getCommonRbacConfig(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommonRbacConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommonRbacConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonRbacConfig>>>
export type GetCommonRbacConfigQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetCommonRbacConfig<
  TData = Awaited<ReturnType<typeof getCommonRbacConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetCommonRbacConfigParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonRbacConfig>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonRbacConfig>>,
          TError,
          Awaited<ReturnType<typeof getCommonRbacConfig>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonRbacConfig<
  TData = Awaited<ReturnType<typeof getCommonRbacConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetCommonRbacConfigParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonRbacConfig>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonRbacConfig>>,
          TError,
          Awaited<ReturnType<typeof getCommonRbacConfig>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommonRbacConfig<
  TData = Awaited<ReturnType<typeof getCommonRbacConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetCommonRbacConfigParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonRbacConfig>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the rbac config according to the user's choice.
 */

export function useGetCommonRbacConfig<
  TData = Awaited<ReturnType<typeof getCommonRbacConfig>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetCommonRbacConfigParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonRbacConfig>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommonRbacConfigQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get events from db.
 * @summary list events.
 */
export const getEvents = (params?: GetEventsParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardCoreEvent[]>({
    url: `/events`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetEventsQueryKey = (params?: GetEventsParams) => {
  return [`/events`, ...(params ? [params] : [])] as const
}

export const getGetEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetEventsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetEventsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvents>>> = ({ signal }) => getEvents(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type GetEventsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetEventsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getEvents>>, TError, Awaited<ReturnType<typeof getEvents>>>,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetEventsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEvents>>,
          TError,
          Awaited<ReturnType<typeof getEvents>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetEventsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary list events.
 */

export function useGetEvents<
  TData = Awaited<ReturnType<typeof getEvents>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetEventsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetEventsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get the event from db by ID.
 * @summary Get an event.
 */
export const getEventsId = (id: number, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardCoreEvent>({
    url: `/events/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetEventsIdQueryKey = (id: number) => {
  return [`/events/${id}`] as const
}

export const getGetEventsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetEventsIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsId>>> = ({ signal }) => getEventsId(id, signal)

  return { queryKey, queryFn, enabled: !!id, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEventsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsId>>>
export type GetEventsIdQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsId>>,
          TError,
          Awaited<ReturnType<typeof getEventsId>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsId>>,
          TError,
          Awaited<ReturnType<typeof getEventsId>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get an event.
 */

export function useGetEventsId<
  TData = Awaited<ReturnType<typeof getEventsId>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsId>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetEventsIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * list all events for Workflow and related WorkflowNode.
 * @summary cascadeFetchEventsForWorkflow list all events for Workflow and related WorkflowNode.
 */
export const getEventsWorkflowUid = (uid: string, params?: GetEventsWorkflowUidParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardCoreEvent[]>({
    url: `/events/workflow/${uid}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetEventsWorkflowUidQueryKey = (uid: string, params?: GetEventsWorkflowUidParams) => {
  return [`/events/workflow/${uid}`, ...(params ? [params] : [])] as const
}

export const getGetEventsWorkflowUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsWorkflowUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  params?: GetEventsWorkflowUidParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsWorkflowUid>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetEventsWorkflowUidQueryKey(uid, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsWorkflowUid>>> = ({ signal }) =>
    getEventsWorkflowUid(uid, params, signal)

  return { queryKey, queryFn, enabled: !!uid, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsWorkflowUid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEventsWorkflowUidQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsWorkflowUid>>>
export type GetEventsWorkflowUidQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetEventsWorkflowUid<
  TData = Awaited<ReturnType<typeof getEventsWorkflowUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  params: undefined | GetEventsWorkflowUidParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsWorkflowUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsWorkflowUid>>,
          TError,
          Awaited<ReturnType<typeof getEventsWorkflowUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsWorkflowUid<
  TData = Awaited<ReturnType<typeof getEventsWorkflowUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  params?: GetEventsWorkflowUidParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsWorkflowUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsWorkflowUid>>,
          TError,
          Awaited<ReturnType<typeof getEventsWorkflowUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsWorkflowUid<
  TData = Awaited<ReturnType<typeof getEventsWorkflowUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  params?: GetEventsWorkflowUidParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsWorkflowUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary cascadeFetchEventsForWorkflow list all events for Workflow and related WorkflowNode.
 */

export function useGetEventsWorkflowUid<
  TData = Awaited<ReturnType<typeof getEventsWorkflowUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  params?: GetEventsWorkflowUidParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsWorkflowUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetEventsWorkflowUidQueryOptions(uid, params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Batch delete chaos experiments by uids.
 * @summary Batch delete chaos experiments.
 */
export const deleteExperiments = (params: DeleteExperimentsParams) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/experiments`,
    method: 'DELETE',
    params,
  })
}

export const getDeleteExperimentsMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExperiments>>,
    TError,
    { params: DeleteExperimentsParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteExperiments>>,
  TError,
  { params: DeleteExperimentsParams },
  TContext
> => {
  const mutationKey = ['deleteExperiments']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteExperiments>>,
    { params: DeleteExperimentsParams }
  > = (props) => {
    const { params } = props ?? {}

    return deleteExperiments(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteExperimentsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteExperiments>>>

export type DeleteExperimentsMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Batch delete chaos experiments.
 */
export const useDeleteExperiments = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteExperiments>>,
      TError,
      { params: DeleteExperimentsParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteExperiments>>,
  TError,
  { params: DeleteExperimentsParams },
  TContext
> => {
  const mutationOptions = getDeleteExperimentsMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get chaos experiments from k8s clusters in real time.
 * @summary List chaos experiments.
 */
export const getExperiments = (params?: GetExperimentsParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesExperiment[]>({
    url: `/experiments`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetExperimentsQueryKey = (params?: GetExperimentsParams) => {
  return [`/experiments`, ...(params ? [params] : [])] as const
}

export const getGetExperimentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getExperiments>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperiments>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetExperimentsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExperiments>>> = ({ signal }) =>
    getExperiments(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getExperiments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExperimentsQueryResult = NonNullable<Awaited<ReturnType<typeof getExperiments>>>
export type GetExperimentsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetExperiments<
  TData = Awaited<ReturnType<typeof getExperiments>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetExperimentsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperiments>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExperiments>>,
          TError,
          Awaited<ReturnType<typeof getExperiments>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExperiments<
  TData = Awaited<ReturnType<typeof getExperiments>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperiments>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExperiments>>,
          TError,
          Awaited<ReturnType<typeof getExperiments>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExperiments<
  TData = Awaited<ReturnType<typeof getExperiments>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperiments>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List chaos experiments.
 */

export function useGetExperiments<
  TData = Awaited<ReturnType<typeof getExperiments>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperiments>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetExperimentsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Pass a JSON object to create a new chaos experiment. The schema for JSON is the same as the YAML schema for the Kubernetes object.
 * @summary Create a new chaos experiment.
 */
export const postExperiments = (postExperimentsBody: PostExperimentsBody, signal?: AbortSignal) => {
  return customInstance<PostExperiments200>({
    url: `/experiments`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postExperimentsBody,
    signal,
  })
}

export const getPostExperimentsMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postExperiments>>,
    TError,
    { data: PostExperimentsBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postExperiments>>,
  TError,
  { data: PostExperimentsBody },
  TContext
> => {
  const mutationKey = ['postExperiments']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postExperiments>>, { data: PostExperimentsBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return postExperiments(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostExperimentsMutationResult = NonNullable<Awaited<ReturnType<typeof postExperiments>>>
export type PostExperimentsMutationBody = PostExperimentsBody
export type PostExperimentsMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Create a new chaos experiment.
 */
export const usePostExperiments = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postExperiments>>,
      TError,
      { data: PostExperimentsBody },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postExperiments>>, TError, { data: PostExperimentsBody }, TContext> => {
  const mutationOptions = getPostExperimentsMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Delete the chaos experiment by uid.
 * @summary Delete a chaos experiment.
 */
export const deleteExperimentsUid = (uid: string, params?: DeleteExperimentsUidParams) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/experiments/${uid}`,
    method: 'DELETE',
    params,
  })
}

export const getDeleteExperimentsUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExperimentsUid>>,
    TError,
    { uid: string; params?: DeleteExperimentsUidParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteExperimentsUid>>,
  TError,
  { uid: string; params?: DeleteExperimentsUidParams },
  TContext
> => {
  const mutationKey = ['deleteExperimentsUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteExperimentsUid>>,
    { uid: string; params?: DeleteExperimentsUidParams }
  > = (props) => {
    const { uid, params } = props ?? {}

    return deleteExperimentsUid(uid, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteExperimentsUidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteExperimentsUid>>>

export type DeleteExperimentsUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete a chaos experiment.
 */
export const useDeleteExperimentsUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteExperimentsUid>>,
      TError,
      { uid: string; params?: DeleteExperimentsUidParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteExperimentsUid>>,
  TError,
  { uid: string; params?: DeleteExperimentsUidParams },
  TContext
> => {
  const mutationOptions = getDeleteExperimentsUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the chaos experiment's detail by uid.
 * @summary Get a chaos experiment.
 */
export const getExperimentsUid = (uid: string, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesExperimentDetail>({
    url: `/experiments/${uid}`,
    method: 'GET',
    signal,
  })
}

export const getGetExperimentsUidQueryKey = (uid: string) => {
  return [`/experiments/${uid}`] as const
}

export const getGetExperimentsUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getExperimentsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsUid>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetExperimentsUidQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExperimentsUid>>> = ({ signal }) =>
    getExperimentsUid(uid, signal)

  return { queryKey, queryFn, enabled: !!uid, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getExperimentsUid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExperimentsUidQueryResult = NonNullable<Awaited<ReturnType<typeof getExperimentsUid>>>
export type GetExperimentsUidQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetExperimentsUid<
  TData = Awaited<ReturnType<typeof getExperimentsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExperimentsUid>>,
          TError,
          Awaited<ReturnType<typeof getExperimentsUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExperimentsUid<
  TData = Awaited<ReturnType<typeof getExperimentsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExperimentsUid>>,
          TError,
          Awaited<ReturnType<typeof getExperimentsUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExperimentsUid<
  TData = Awaited<ReturnType<typeof getExperimentsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a chaos experiment.
 */

export function useGetExperimentsUid<
  TData = Awaited<ReturnType<typeof getExperimentsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetExperimentsUidQueryOptions(uid, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Pause a chaos experiment.
 * @summary Pause a chaos experiment.
 */
export const putExperimentsPauseUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/experiments/pause/${uid}`,
    method: 'PUT',
  })
}

export const getPutExperimentsPauseUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putExperimentsPauseUid>>, TError, { uid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof putExperimentsPauseUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['putExperimentsPauseUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putExperimentsPauseUid>>, { uid: string }> = (props) => {
    const { uid } = props ?? {}

    return putExperimentsPauseUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutExperimentsPauseUidMutationResult = NonNullable<Awaited<ReturnType<typeof putExperimentsPauseUid>>>

export type PutExperimentsPauseUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Pause a chaos experiment.
 */
export const usePutExperimentsPauseUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof putExperimentsPauseUid>>, TError, { uid: string }, TContext>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof putExperimentsPauseUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getPutExperimentsPauseUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Start a chaos experiment.
 * @summary Start a chaos experiment.
 */
export const putExperimentsStartUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/experiments/start/${uid}`,
    method: 'PUT',
  })
}

export const getPutExperimentsStartUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putExperimentsStartUid>>, TError, { uid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof putExperimentsStartUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['putExperimentsStartUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putExperimentsStartUid>>, { uid: string }> = (props) => {
    const { uid } = props ?? {}

    return putExperimentsStartUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutExperimentsStartUidMutationResult = NonNullable<Awaited<ReturnType<typeof putExperimentsStartUid>>>

export type PutExperimentsStartUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Start a chaos experiment.
 */
export const usePutExperimentsStartUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof putExperimentsStartUid>>, TError, { uid: string }, TContext>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof putExperimentsStartUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getPutExperimentsStartUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the status of all experiments.
 * @summary Get the status of all experiments.
 */
export const getExperimentsState = (params?: GetExperimentsStateParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgStatusAllChaosStatus>({
    url: `/experiments/state`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetExperimentsStateQueryKey = (params?: GetExperimentsStateParams) => {
  return [`/experiments/state`, ...(params ? [params] : [])] as const
}

export const getGetExperimentsStateQueryOptions = <
  TData = Awaited<ReturnType<typeof getExperimentsState>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsStateParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsState>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetExperimentsStateQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExperimentsState>>> = ({ signal }) =>
    getExperimentsState(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getExperimentsState>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExperimentsStateQueryResult = NonNullable<Awaited<ReturnType<typeof getExperimentsState>>>
export type GetExperimentsStateQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetExperimentsState<
  TData = Awaited<ReturnType<typeof getExperimentsState>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetExperimentsStateParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsState>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExperimentsState>>,
          TError,
          Awaited<ReturnType<typeof getExperimentsState>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExperimentsState<
  TData = Awaited<ReturnType<typeof getExperimentsState>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsStateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsState>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExperimentsState>>,
          TError,
          Awaited<ReturnType<typeof getExperimentsState>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExperimentsState<
  TData = Awaited<ReturnType<typeof getExperimentsState>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsStateParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsState>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the status of all experiments.
 */

export function useGetExperimentsState<
  TData = Awaited<ReturnType<typeof getExperimentsState>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetExperimentsStateParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getExperimentsState>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetExperimentsStateQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Batch delete schedules by uids.
 * @summary Batch delete schedules.
 */
export const deleteSchedules = (params: DeleteSchedulesParams) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/schedules`,
    method: 'DELETE',
    params,
  })
}

export const getDeleteSchedulesMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSchedules>>,
    TError,
    { params: DeleteSchedulesParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSchedules>>,
  TError,
  { params: DeleteSchedulesParams },
  TContext
> => {
  const mutationKey = ['deleteSchedules']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSchedules>>, { params: DeleteSchedulesParams }> = (
    props,
  ) => {
    const { params } = props ?? {}

    return deleteSchedules(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteSchedulesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSchedules>>>

export type DeleteSchedulesMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Batch delete schedules.
 */
export const useDeleteSchedules = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteSchedules>>,
      TError,
      { params: DeleteSchedulesParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteSchedules>>,
  TError,
  { params: DeleteSchedulesParams },
  TContext
> => {
  const mutationOptions = getDeleteSchedulesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get chaos schedules from k8s cluster in real time.
 * @summary List chaos schedules.
 */
export const getSchedules = (params?: GetSchedulesParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesSchedule[]>({
    url: `/schedules`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetSchedulesQueryKey = (params?: GetSchedulesParams) => {
  return [`/schedules`, ...(params ? [params] : [])] as const
}

export const getGetSchedulesQueryOptions = <
  TData = Awaited<ReturnType<typeof getSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetSchedulesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSchedulesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedules>>> = ({ signal }) => getSchedules(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSchedules>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedules>>>
export type GetSchedulesQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetSchedules<
  TData = Awaited<ReturnType<typeof getSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetSchedulesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedules>>,
          TError,
          Awaited<ReturnType<typeof getSchedules>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedules<
  TData = Awaited<ReturnType<typeof getSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetSchedulesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedules>>,
          TError,
          Awaited<ReturnType<typeof getSchedules>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedules<
  TData = Awaited<ReturnType<typeof getSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetSchedulesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List chaos schedules.
 */

export function useGetSchedules<
  TData = Awaited<ReturnType<typeof getSchedules>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetSchedulesParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedules>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSchedulesQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Pass a JSON object to create a new schedule. The schema for JSON is the same as the YAML schema for the Kubernetes object.
 * @summary Create a new schedule.
 */
export const postSchedules = (v1alpha1Schedule: V1alpha1Schedule, signal?: AbortSignal) => {
  return customInstance<V1alpha1Schedule>({
    url: `/schedules`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: v1alpha1Schedule,
    signal,
  })
}

export const getPostSchedulesMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSchedules>>, TError, { data: V1alpha1Schedule }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof postSchedules>>, TError, { data: V1alpha1Schedule }, TContext> => {
  const mutationKey = ['postSchedules']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSchedules>>, { data: V1alpha1Schedule }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return postSchedules(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSchedulesMutationResult = NonNullable<Awaited<ReturnType<typeof postSchedules>>>
export type PostSchedulesMutationBody = V1alpha1Schedule
export type PostSchedulesMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Create a new schedule.
 */
export const usePostSchedules = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postSchedules>>,
      TError,
      { data: V1alpha1Schedule },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postSchedules>>, TError, { data: V1alpha1Schedule }, TContext> => {
  const mutationOptions = getPostSchedulesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Delete the schedule by uid.
 * @summary Delete a schedule.
 */
export const deleteSchedulesUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/schedules/${uid}`,
    method: 'DELETE',
  })
}

export const getDeleteSchedulesUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteSchedulesUid>>, TError, { uid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteSchedulesUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['deleteSchedulesUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSchedulesUid>>, { uid: string }> = (props) => {
    const { uid } = props ?? {}

    return deleteSchedulesUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteSchedulesUidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSchedulesUid>>>

export type DeleteSchedulesUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete a schedule.
 */
export const useDeleteSchedulesUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteSchedulesUid>>, TError, { uid: string }, TContext>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteSchedulesUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getDeleteSchedulesUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the schedule's detail by uid.
 * @summary Get a schedule.
 */
export const getSchedulesUid = (uid: string, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesScheduleDetail>({
    url: `/schedules/${uid}`,
    method: 'GET',
    signal,
  })
}

export const getGetSchedulesUidQueryKey = (uid: string) => {
  return [`/schedules/${uid}`] as const
}

export const getGetSchedulesUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesUid>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSchedulesUidQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchedulesUid>>> = ({ signal }) =>
    getSchedulesUid(uid, signal)

  return { queryKey, queryFn, enabled: !!uid, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSchedulesUid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSchedulesUidQueryResult = NonNullable<Awaited<ReturnType<typeof getSchedulesUid>>>
export type GetSchedulesUidQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetSchedulesUid<
  TData = Awaited<ReturnType<typeof getSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedulesUid>>,
          TError,
          Awaited<ReturnType<typeof getSchedulesUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedulesUid<
  TData = Awaited<ReturnType<typeof getSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchedulesUid>>,
          TError,
          Awaited<ReturnType<typeof getSchedulesUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSchedulesUid<
  TData = Awaited<ReturnType<typeof getSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a schedule.
 */

export function useGetSchedulesUid<
  TData = Awaited<ReturnType<typeof getSchedulesUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchedulesUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSchedulesUidQueryOptions(uid, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Pause a schedule.
 * @summary Pause a schedule.
 */
export const putSchedulesPauseUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/schedules/pause/${uid}`,
    method: 'PUT',
  })
}

export const getPutSchedulesPauseUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putSchedulesPauseUid>>, TError, { uid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof putSchedulesPauseUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['putSchedulesPauseUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSchedulesPauseUid>>, { uid: string }> = (props) => {
    const { uid } = props ?? {}

    return putSchedulesPauseUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutSchedulesPauseUidMutationResult = NonNullable<Awaited<ReturnType<typeof putSchedulesPauseUid>>>

export type PutSchedulesPauseUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Pause a schedule.
 */
export const usePutSchedulesPauseUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof putSchedulesPauseUid>>, TError, { uid: string }, TContext>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof putSchedulesPauseUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getPutSchedulesPauseUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Start a schedule.
 * @summary Start a schedule.
 */
export const putSchedulesStartUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/schedules/start/${uid}`,
    method: 'PUT',
  })
}

export const getPutSchedulesStartUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putSchedulesStartUid>>, TError, { uid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof putSchedulesStartUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['putSchedulesStartUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSchedulesStartUid>>, { uid: string }> = (props) => {
    const { uid } = props ?? {}

    return putSchedulesStartUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutSchedulesStartUidMutationResult = NonNullable<Awaited<ReturnType<typeof putSchedulesStartUid>>>

export type PutSchedulesStartUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Start a schedule.
 */
export const usePutSchedulesStartUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof putSchedulesStartUid>>, TError, { uid: string }, TContext>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof putSchedulesStartUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getPutSchedulesStartUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get status check templates from k8s cluster in real time.
 * @summary List status check templates.
 */
export const getTemplatesStatuschecks = (params?: GetTemplatesStatuschecksParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplateBase[]>({
    url: `/templates/statuschecks`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetTemplatesStatuschecksQueryKey = (params?: GetTemplatesStatuschecksParams) => {
  return [`/templates/statuschecks`, ...(params ? [params] : [])] as const
}

export const getGetTemplatesStatuschecksQueryOptions = <
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetTemplatesStatuschecksParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecks>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTemplatesStatuschecksQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTemplatesStatuschecks>>> = ({ signal }) =>
    getTemplatesStatuschecks(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTemplatesStatuschecksQueryResult = NonNullable<Awaited<ReturnType<typeof getTemplatesStatuschecks>>>
export type GetTemplatesStatuschecksQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetTemplatesStatuschecks<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetTemplatesStatuschecksParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecks>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
          TError,
          Awaited<ReturnType<typeof getTemplatesStatuschecks>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTemplatesStatuschecks<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetTemplatesStatuschecksParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecks>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
          TError,
          Awaited<ReturnType<typeof getTemplatesStatuschecks>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTemplatesStatuschecks<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetTemplatesStatuschecksParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecks>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List status check templates.
 */

export function useGetTemplatesStatuschecks<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecks>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetTemplatesStatuschecksParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecks>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTemplatesStatuschecksQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Pass a JSON object to create a new status check template.
 * @summary Create a new status check template.
 */
export const postTemplatesStatuschecks = (
  githubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate,
  signal?: AbortSignal,
) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate>({
    url: `/templates/statuschecks`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: githubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate,
    signal,
  })
}

export const getPostTemplatesStatuschecksMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTemplatesStatuschecks>>,
    TError,
    { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTemplatesStatuschecks>>,
  TError,
  { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
  TContext
> => {
  const mutationKey = ['postTemplatesStatuschecks']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTemplatesStatuschecks>>,
    { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate }
  > = (props) => {
    const { data } = props ?? {}

    return postTemplatesStatuschecks(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostTemplatesStatuschecksMutationResult = NonNullable<Awaited<ReturnType<typeof postTemplatesStatuschecks>>>
export type PostTemplatesStatuschecksMutationBody =
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate
export type PostTemplatesStatuschecksMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Create a new status check template.
 */
export const usePostTemplatesStatuschecks = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postTemplatesStatuschecks>>,
      TError,
      { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postTemplatesStatuschecks>>,
  TError,
  { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
  TContext
> => {
  const mutationOptions = getPostTemplatesStatuschecksMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Delete the status check template by namespaced name.
 * @summary Delete a status check template.
 */
export const deleteTemplatesStatuschecksStatuscheck = (params: DeleteTemplatesStatuschecksStatuscheckParams) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/templates/statuschecks/statuscheck`,
    method: 'DELETE',
    params,
  })
}

export const getDeleteTemplatesStatuschecksStatuscheckMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTemplatesStatuschecksStatuscheck>>,
    TError,
    { params: DeleteTemplatesStatuschecksStatuscheckParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTemplatesStatuschecksStatuscheck>>,
  TError,
  { params: DeleteTemplatesStatuschecksStatuscheckParams },
  TContext
> => {
  const mutationKey = ['deleteTemplatesStatuschecksStatuscheck']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTemplatesStatuschecksStatuscheck>>,
    { params: DeleteTemplatesStatuschecksStatuscheckParams }
  > = (props) => {
    const { params } = props ?? {}

    return deleteTemplatesStatuschecksStatuscheck(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteTemplatesStatuschecksStatuscheckMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTemplatesStatuschecksStatuscheck>>
>

export type DeleteTemplatesStatuschecksStatuscheckMutationError =
  GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete a status check template.
 */
export const useDeleteTemplatesStatuschecksStatuscheck = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTemplatesStatuschecksStatuscheck>>,
      TError,
      { params: DeleteTemplatesStatuschecksStatuscheckParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTemplatesStatuschecksStatuscheck>>,
  TError,
  { params: DeleteTemplatesStatuschecksStatuscheckParams },
  TContext
> => {
  const mutationOptions = getDeleteTemplatesStatuschecksStatuscheckMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get the status check template's detail by namespaced name.
 * @summary Get a status check template.
 */
export const getTemplatesStatuschecksStatuscheck = (
  params: GetTemplatesStatuschecksStatuscheckParams,
  signal?: AbortSignal,
) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplateDetail>({
    url: `/templates/statuschecks/statuscheck`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetTemplatesStatuschecksStatuscheckQueryKey = (params: GetTemplatesStatuschecksStatuscheckParams) => {
  return [`/templates/statuschecks/statuscheck`, ...(params ? [params] : [])] as const
}

export const getGetTemplatesStatuschecksStatuscheckQueryOptions = <
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetTemplatesStatuschecksStatuscheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTemplatesStatuschecksStatuscheckQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>> = ({ signal }) =>
    getTemplatesStatuschecksStatuscheck(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTemplatesStatuschecksStatuscheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>
>
export type GetTemplatesStatuschecksStatuscheckQueryError =
  GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetTemplatesStatuschecksStatuscheck<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetTemplatesStatuschecksStatuscheckParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
          TError,
          Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTemplatesStatuschecksStatuscheck<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetTemplatesStatuschecksStatuscheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
          TError,
          Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTemplatesStatuschecksStatuscheck<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetTemplatesStatuschecksStatuscheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a status check template.
 */

export function useGetTemplatesStatuschecksStatuscheck<
  TData = Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: GetTemplatesStatuschecksStatuscheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTemplatesStatuschecksStatuscheck>>, TError, TData>>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTemplatesStatuschecksStatuscheckQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a status check template by namespaced name.
 * @summary Update a status check template.
 */
export const putTemplatesStatuschecksStatuscheck = (
  githubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate,
) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate>({
    url: `/templates/statuschecks/statuscheck`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: githubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate,
  })
}

export const getPutTemplatesStatuschecksStatuscheckMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTemplatesStatuschecksStatuscheck>>,
    TError,
    { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putTemplatesStatuschecksStatuscheck>>,
  TError,
  { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
  TContext
> => {
  const mutationKey = ['putTemplatesStatuschecksStatuscheck']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTemplatesStatuschecksStatuscheck>>,
    { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate }
  > = (props) => {
    const { data } = props ?? {}

    return putTemplatesStatuschecksStatuscheck(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutTemplatesStatuschecksStatuscheckMutationResult = NonNullable<
  Awaited<ReturnType<typeof putTemplatesStatuschecksStatuscheck>>
>
export type PutTemplatesStatuschecksStatuscheckMutationBody =
  GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate
export type PutTemplatesStatuschecksStatuscheckMutationError =
  GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Update a status check template.
 */
export const usePutTemplatesStatuschecksStatuscheck = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putTemplatesStatuschecksStatuscheck>>,
      TError,
      { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putTemplatesStatuschecksStatuscheck>>,
  TError,
  { data: GithubComChaosMeshChaosMeshPkgDashboardApiserverTypesStatusCheckTemplate },
  TContext
> => {
  const mutationOptions = getPutTemplatesStatuschecksStatuscheckMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * List workflows from Kubernetes cluster.
 * @summary List workflows from Kubernetes cluster.
 */
export const getWorkflows = (params?: GetWorkflowsParams, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardCoreWorkflowMeta[]>({
    url: `/workflows`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetWorkflowsQueryKey = (params?: GetWorkflowsParams) => {
  return [`/workflows`, ...(params ? [params] : [])] as const
}

export const getGetWorkflowsQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetWorkflowsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWorkflowsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkflows>>> = ({ signal }) => getWorkflows(params, signal)

  return { queryKey, queryFn, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkflows>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkflowsQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkflows>>>
export type GetWorkflowsQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetWorkflows<
  TData = Awaited<ReturnType<typeof getWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params: undefined | GetWorkflowsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflows>>,
          TError,
          Awaited<ReturnType<typeof getWorkflows>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflows<
  TData = Awaited<ReturnType<typeof getWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetWorkflowsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflows>>,
          TError,
          Awaited<ReturnType<typeof getWorkflows>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflows<
  TData = Awaited<ReturnType<typeof getWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetWorkflowsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List workflows from Kubernetes cluster.
 */

export function useGetWorkflows<
  TData = Awaited<ReturnType<typeof getWorkflows>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  params?: GetWorkflowsParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWorkflowsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Create a new workflow.
 * @summary Create a new workflow.
 */
export const postWorkflows = (v1alpha1WorkflowBody: V1alpha1WorkflowBody, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardCoreWorkflowDetail>({
    url: `/workflows`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: v1alpha1WorkflowBody,
    signal,
  })
}

export const getPostWorkflowsMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkflows>>,
    TError,
    { data: V1alpha1WorkflowBody },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<typeof postWorkflows>>, TError, { data: V1alpha1WorkflowBody }, TContext> => {
  const mutationKey = ['postWorkflows']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWorkflows>>, { data: V1alpha1WorkflowBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return postWorkflows(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostWorkflowsMutationResult = NonNullable<Awaited<ReturnType<typeof postWorkflows>>>
export type PostWorkflowsMutationBody = V1alpha1WorkflowBody
export type PostWorkflowsMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Create a new workflow.
 */
export const usePostWorkflows = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postWorkflows>>,
      TError,
      { data: V1alpha1WorkflowBody },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postWorkflows>>, TError, { data: V1alpha1WorkflowBody }, TContext> => {
  const mutationOptions = getPostWorkflowsMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Delete the specified workflow.
 * @summary Delete the specified workflow.
 */
export const deleteWorkflowsUid = (uid: string) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsResponse>({
    url: `/workflows/${uid}`,
    method: 'DELETE',
  })
}

export const getDeleteWorkflowsUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteWorkflowsUid>>, TError, { uid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteWorkflowsUid>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['deleteWorkflowsUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWorkflowsUid>>, { uid: string }> = (props) => {
    const { uid } = props ?? {}

    return deleteWorkflowsUid(uid)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteWorkflowsUidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWorkflowsUid>>>

export type DeleteWorkflowsUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Delete the specified workflow.
 */
export const useDeleteWorkflowsUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteWorkflowsUid>>, TError, { uid: string }, TContext>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteWorkflowsUid>>, TError, { uid: string }, TContext> => {
  const mutationOptions = getDeleteWorkflowsUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get detailed information about the specified workflow. If that object is not existed in kubernetes, it will only return ths persisted data in the database.
 * @summary Get detailed information about the specified workflow.
 */
export const getWorkflowsUid = (uid: string, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardCoreWorkflowDetail>({
    url: `/workflows/${uid}`,
    method: 'GET',
    signal,
  })
}

export const getGetWorkflowsUidQueryKey = (uid: string) => {
  return [`/workflows/${uid}`] as const
}

export const getGetWorkflowsUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowsUid>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWorkflowsUidQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkflowsUid>>> = ({ signal }) =>
    getWorkflowsUid(uid, signal)

  return { queryKey, queryFn, enabled: !!uid, retry: 1, retryDelay: 3000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkflowsUid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkflowsUidQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkflowsUid>>>
export type GetWorkflowsUidQueryError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

export function useGetWorkflowsUid<
  TData = Awaited<ReturnType<typeof getWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowsUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowsUid>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowsUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowsUid<
  TData = Awaited<ReturnType<typeof getWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowsUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowsUid>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowsUid>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowsUid<
  TData = Awaited<ReturnType<typeof getWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowsUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get detailed information about the specified workflow.
 */

export function useGetWorkflowsUid<
  TData = Awaited<ReturnType<typeof getWorkflowsUid>>,
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
>(
  uid: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowsUid>>, TError, TData>> },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWorkflowsUidQueryOptions(uid, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a workflow.
 * @summary Update a workflow.
 */
export const putWorkflowsUid = (uid: string, v1alpha1WorkflowBody: V1alpha1WorkflowBody) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgDashboardCoreWorkflowDetail>({
    url: `/workflows/${uid}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: v1alpha1WorkflowBody,
  })
}

export const getPutWorkflowsUidMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putWorkflowsUid>>,
    TError,
    { uid: string; data: V1alpha1WorkflowBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putWorkflowsUid>>,
  TError,
  { uid: string; data: V1alpha1WorkflowBody },
  TContext
> => {
  const mutationKey = ['putWorkflowsUid']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putWorkflowsUid>>,
    { uid: string; data: V1alpha1WorkflowBody }
  > = (props) => {
    const { uid, data } = props ?? {}

    return putWorkflowsUid(uid, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutWorkflowsUidMutationResult = NonNullable<Awaited<ReturnType<typeof putWorkflowsUid>>>
export type PutWorkflowsUidMutationBody = V1alpha1WorkflowBody
export type PutWorkflowsUidMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Update a workflow.
 */
export const usePutWorkflowsUid = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putWorkflowsUid>>,
      TError,
      { uid: string; data: V1alpha1WorkflowBody },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putWorkflowsUid>>,
  TError,
  { uid: string; data: V1alpha1WorkflowBody },
  TContext
> => {
  const mutationOptions = getPutWorkflowsUidMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Parse the rendered task back to the original request
 * @summary Parse the rendered task back to the original request
 */
export const postWorkflowsParseTaskHttp = (v1alpha1TemplateBody: V1alpha1TemplateBody, signal?: AbortSignal) => {
  return customInstance<GithubComChaosMeshChaosMeshPkgCurlRequestForm>({
    url: `/workflows/parse-task/http`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: v1alpha1TemplateBody,
    signal,
  })
}

export const getPostWorkflowsParseTaskHttpMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkflowsParseTaskHttp>>,
    TError,
    { data: V1alpha1TemplateBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWorkflowsParseTaskHttp>>,
  TError,
  { data: V1alpha1TemplateBody },
  TContext
> => {
  const mutationKey = ['postWorkflowsParseTaskHttp']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWorkflowsParseTaskHttp>>,
    { data: V1alpha1TemplateBody }
  > = (props) => {
    const { data } = props ?? {}

    return postWorkflowsParseTaskHttp(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostWorkflowsParseTaskHttpMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWorkflowsParseTaskHttp>>
>
export type PostWorkflowsParseTaskHttpMutationBody = V1alpha1TemplateBody
export type PostWorkflowsParseTaskHttpMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Parse the rendered task back to the original request
 */
export const usePostWorkflowsParseTaskHttp = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postWorkflowsParseTaskHttp>>,
      TError,
      { data: V1alpha1TemplateBody },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postWorkflowsParseTaskHttp>>,
  TError,
  { data: V1alpha1TemplateBody },
  TContext
> => {
  const mutationOptions = getPostWorkflowsParseTaskHttpMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Render a task which sends HTTP request
 * @summary Render a task which sends HTTP request
 */
export const postWorkflowsRenderTaskHttp = (
  githubComChaosMeshChaosMeshPkgCurlRequestForm: GithubComChaosMeshChaosMeshPkgCurlRequestForm,
  signal?: AbortSignal,
) => {
  return customInstance<V1alpha1Template>({
    url: `/workflows/render-task/http`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: githubComChaosMeshChaosMeshPkgCurlRequestForm,
    signal,
  })
}

export const getPostWorkflowsRenderTaskHttpMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkflowsRenderTaskHttp>>,
    TError,
    { data: GithubComChaosMeshChaosMeshPkgCurlRequestForm },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWorkflowsRenderTaskHttp>>,
  TError,
  { data: GithubComChaosMeshChaosMeshPkgCurlRequestForm },
  TContext
> => {
  const mutationKey = ['postWorkflowsRenderTaskHttp']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWorkflowsRenderTaskHttp>>,
    { data: GithubComChaosMeshChaosMeshPkgCurlRequestForm }
  > = (props) => {
    const { data } = props ?? {}

    return postWorkflowsRenderTaskHttp(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostWorkflowsRenderTaskHttpMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWorkflowsRenderTaskHttp>>
>
export type PostWorkflowsRenderTaskHttpMutationBody = GithubComChaosMeshChaosMeshPkgCurlRequestForm
export type PostWorkflowsRenderTaskHttpMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Render a task which sends HTTP request
 */
export const usePostWorkflowsRenderTaskHttp = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postWorkflowsRenderTaskHttp>>,
      TError,
      { data: GithubComChaosMeshChaosMeshPkgCurlRequestForm },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postWorkflowsRenderTaskHttp>>,
  TError,
  { data: GithubComChaosMeshChaosMeshPkgCurlRequestForm },
  TContext
> => {
  const mutationOptions = getPostWorkflowsRenderTaskHttpMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Validate the given template is a valid rendered HTTP Task
 * @summary Validate the given template is a valid rendered HTTP Task
 */
export const postWorkflowsValidateTaskHttp = (v1alpha1TemplateBody: V1alpha1TemplateBody, signal?: AbortSignal) => {
  return customInstance<boolean>({
    url: `/workflows/validate-task/http`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: v1alpha1TemplateBody,
    signal,
  })
}

export const getPostWorkflowsValidateTaskHttpMutationOptions = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkflowsValidateTaskHttp>>,
    TError,
    { data: V1alpha1TemplateBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWorkflowsValidateTaskHttp>>,
  TError,
  { data: V1alpha1TemplateBody },
  TContext
> => {
  const mutationKey = ['postWorkflowsValidateTaskHttp']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWorkflowsValidateTaskHttp>>,
    { data: V1alpha1TemplateBody }
  > = (props) => {
    const { data } = props ?? {}

    return postWorkflowsValidateTaskHttp(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostWorkflowsValidateTaskHttpMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWorkflowsValidateTaskHttp>>
>
export type PostWorkflowsValidateTaskHttpMutationBody = V1alpha1TemplateBody
export type PostWorkflowsValidateTaskHttpMutationError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError

/**
 * @summary Validate the given template is a valid rendered HTTP Task
 */
export const usePostWorkflowsValidateTaskHttp = <
  TError = GithubComChaosMeshChaosMeshPkgDashboardApiserverUtilsAPIError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postWorkflowsValidateTaskHttp>>,
      TError,
      { data: V1alpha1TemplateBody },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postWorkflowsValidateTaskHttp>>,
  TError,
  { data: V1alpha1TemplateBody },
  TContext
> => {
  const mutationOptions = getPostWorkflowsValidateTaskHttpMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
