/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Chaos Mesh Dashboard API
 * Swagger for Chaos Mesh Dashboard. If you encounter any problems with API, please click on the issues link below to report.
 * OpenAPI spec version: 2.5
 */
export interface ConfigChaosDashboardConfig {
  /** ClusterScoped means control Chaos Object in cluster level(all namespace). */
  cluster_mode?: boolean
  /** After v2.5, the DNS server is created by default. */
  dns_server_create?: boolean
  /** EnableFilterNamespace will filter namespace with annotation. Only the pods/containers in namespace
annotated with `chaos-mesh.org/inject=enabled` will be injected. */
  enableFilterNamespace?: boolean
  /** GcpSecurityMode will use the gcloud authentication to login to GKE user */
  gcp_security_mode?: boolean
  listen_host?: string
  listen_port?: number
  root_path?: string
  /** SecurityMode will use the token login by the user if set to true */
  security_mode?: boolean
  /** TargetNamespace is the target namespace to injecting chaos.
It only works with ClusterScoped is false. */
  target_namespace?: string
  version?: string
}

export interface CoreConditionalBranch {
  expression?: string
  name?: string
  template?: string
}

export interface CoreEvent {
  created_at?: string
  id?: number
  kind?: string
  message?: string
  name?: string
  namespace?: string
  object_id?: string
  reason?: string
  type?: string
}

export interface CoreKubeObjectDesc {
  /** APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
+optional */
  apiVersion?: string
  /** Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
+optional */
  kind?: string
  metadata?: CoreKubeObjectMeta
  spec?: unknown
}

export type CoreKubeObjectMetaAnnotations = { [key: string]: string }

export type CoreKubeObjectMetaLabels = { [key: string]: string }

export interface CoreKubeObjectMeta {
  annotations?: CoreKubeObjectMetaAnnotations
  labels?: CoreKubeObjectMetaLabels
  name?: string
  namespace?: string
}

export interface CoreNode {
  conditional_branches?: CoreConditionalBranch[]
  name?: string
  parallel?: CoreNodeNameWithTemplate[]
  serial?: CoreNodeNameWithTemplate[]
  state?: string
  template?: string
  type?: string
  uid?: string
}

export interface CoreNodeNameWithTemplate {
  name?: string
  template?: string
}

export interface CoreTopology {
  nodes?: CoreNode[]
}

export interface CoreWorkflowDetail {
  created_at?: string
  /** EndTime represents the time when the workflow completed all steps. */
  end_time?: string
  /** the entry node name */
  entry?: string
  /** FinishTime represents the time when the workflow was deleted from Kubernetes. */
  finish_time?: string
  id?: number
  kube_object?: CoreKubeObjectDesc
  name?: string
  namespace?: string
  status?: string
  topology?: CoreTopology
  uid?: string
}

export interface CoreWorkflowMeta {
  created_at?: string
  /** EndTime represents the time when the workflow completed all steps. */
  end_time?: string
  /** the entry node name */
  entry?: string
  /** FinishTime represents the time when the workflow was deleted from Kubernetes. */
  finish_time?: string
  id?: number
  name?: string
  namespace?: string
  status?: string
  uid?: string
}

export interface CurlHeader {
  [key: string]: string[]
}

export interface CurlRequestForm {
  body?: string
  followLocation?: boolean
  header?: CurlHeader
  jsonContent?: boolean
  method?: string
  name?: string
  url?: string
}

export interface HttpHeader {
  [key: string]: string[]
}

export interface IntstrIntOrString {
  intVal?: number
  strVal?: string
  type?: number
}

export interface ResourceQuantity {
  Format?: string
}

export interface StatusAllChaosStatus {
  deleting?: number
  finished?: number
  injecting?: number
  paused?: number
  running?: number
}

export interface TypesArchive {
  created_at?: string
  kind?: string
  name?: string
  namespace?: string
  uid?: string
}

export interface TypesArchiveDetail {
  created_at?: string
  kind?: string
  kube_object?: CoreKubeObjectDesc
  name?: string
  namespace?: string
  uid?: string
}

export interface TypesExperiment {
  created_at?: string
  failed_message?: string
  kind?: string
  name?: string
  namespace?: string
  status?: string
  uid?: string
}

export interface TypesExperimentDetail {
  created_at?: string
  failed_message?: string
  kind?: string
  kube_object?: CoreKubeObjectDesc
  name?: string
  namespace?: string
  status?: string
  uid?: string
}

export interface TypesPhysicalMachine {
  address?: string
  name?: string
  namespace?: string
}

export interface TypesPod {
  ip?: string
  name?: string
  namespace?: string
  state?: string
}

export interface TypesSchedule {
  created_at?: string
  kind?: string
  name?: string
  namespace?: string
  status?: string
  uid?: string
}

export interface TypesScheduleDetail {
  created_at?: string
  experiment_uids?: string[]
  kind?: string
  kube_object?: CoreKubeObjectDesc
  name?: string
  namespace?: string
  status?: string
  uid?: string
}

export interface TypesStatusCheckTemplate {
  description?: string
  name?: string
  namespace?: string
  spec?: V1alpha1StatusCheckTemplate
}

export interface TypesStatusCheckTemplateBase {
  created_at?: string
  description?: string
  name?: string
  namespace?: string
  uid?: string
}

export interface TypesStatusCheckTemplateDetail {
  created_at?: string
  description?: string
  name?: string
  namespace?: string
  spec?: V1alpha1StatusCheckTemplate
  uid?: string
}

export interface UtilsAPIError {
  code?: number
  full_text?: string
  message?: string
  type?: string
}

export interface UtilsMapStringSliceResponse {
  [key: string]: string[]
}

export interface UtilsResponse {
  status?: string
}

export interface V1AWSElasticBlockStoreVolumeSource {
  /** fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
TODO: how do we prevent errors in the filesystem from compromising the machine
+optional */
  fsType?: string
  /** partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
+optional */
  partition?: number
  /** readOnly value true will force the readOnly setting in VolumeMounts.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
+optional */
  readOnly?: boolean
  /** volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore */
  volumeID?: string
}

export interface V1AzureDiskVolumeSource {
  /** cachingMode is the Host Caching mode: None, Read Only, Read Write.
+optional */
  cachingMode?: string
  /** diskName is the Name of the data disk in the blob storage */
  diskName?: string
  /** diskURI is the URI of data disk in the blob storage */
  diskURI?: string
  /** fsType is Filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
+optional */
  fsType?: string
  /** kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared */
  kind?: string
  /** readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
+optional */
  readOnly?: boolean
}

export interface V1AzureFileVolumeSource {
  /** readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
+optional */
  readOnly?: boolean
  /** secretName is the  name of secret that contains Azure Storage Account Name and Key */
  secretName?: string
  /** shareName is the azure share Name */
  shareName?: string
}

/**
 * volumeAttributes stores driver-specific properties that are passed to the CSI
driver. Consult your driver's documentation for supported values.
+optional
 */
export type V1CSIVolumeSourceVolumeAttributes = { [key: string]: string }

export interface V1CSIVolumeSource {
  /** driver is the name of the CSI driver that handles this volume.
Consult with your admin for the correct name as registered in the cluster. */
  driver?: string
  /** fsType to mount. Ex. "ext4", "xfs", "ntfs".
If not provided, the empty value is passed to the associated CSI driver
which will determine the default filesystem to apply.
+optional */
  fsType?: string
  nodePublishSecretRef?: V1LocalObjectReference
  /** readOnly specifies a read-only configuration for the volume.
Defaults to false (read/write).
+optional */
  readOnly?: boolean
  /** volumeAttributes stores driver-specific properties that are passed to the CSI
driver. Consult your driver's documentation for supported values.
+optional */
  volumeAttributes?: V1CSIVolumeSourceVolumeAttributes
}

export interface V1Capabilities {
  /** Added capabilities
+optional */
  add?: string[]
  /** Removed capabilities
+optional */
  drop?: string[]
}

export interface V1CephFSVolumeSource {
  /** monitors is Required: Monitors is a collection of Ceph monitors
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it */
  monitors?: string[]
  /** path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
+optional */
  path?: string
  /** readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
+optional */
  readOnly?: boolean
  /** secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
+optional */
  secretFile?: string
  secretRef?: V1LocalObjectReference
  /** user is optional: User is the rados user name, default is admin
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
+optional */
  user?: string
}

export interface V1CinderVolumeSource {
  /** fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
+optional */
  fsType?: string
  /** readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
+optional */
  readOnly?: boolean
  secretRef?: V1LocalObjectReference
  /** volumeID used to identify the volume in cinder.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md */
  volumeID?: string
}

export interface V1ConfigMapEnvSource {
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
  /** Specify whether the ConfigMap must be defined
+optional */
  optional?: boolean
}

export interface V1ConfigMapKeySelector {
  /** The key to select. */
  key?: string
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
  /** Specify whether the ConfigMap or its key must be defined
+optional */
  optional?: boolean
}

export interface V1ConfigMapProjection {
  /** items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
+optional */
  items?: V1KeyToPath[]
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
  /** optional specify whether the ConfigMap or its keys must be defined
+optional */
  optional?: boolean
}

export interface V1ConfigMapVolumeSource {
  /** defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
+optional */
  defaultMode?: number
  /** items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
+optional */
  items?: V1KeyToPath[]
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
  /** optional specify whether the ConfigMap or its keys must be defined
+optional */
  optional?: boolean
}

export interface V1Container {
  /** Arguments to the entrypoint.
The container image's CMD is used if this is not provided.
Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
of whether the variable exists or not. Cannot be updated.
More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
+optional */
  args?: string[]
  /** Entrypoint array. Not executed within a shell.
The container image's ENTRYPOINT is used if this is not provided.
Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
of whether the variable exists or not. Cannot be updated.
More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
+optional */
  command?: string[]
  /** List of environment variables to set in the container.
Cannot be updated.
+optional
+patchMergeKey=name
+patchStrategy=merge */
  env?: V1EnvVar[]
  /** List of sources to populate environment variables in the container.
The keys defined within a source must be a C_IDENTIFIER. All invalid keys
will be reported as an event when the container is starting. When a key exists in multiple
sources, the value associated with the last source will take precedence.
Values defined by an Env with a duplicate key will take precedence.
Cannot be updated.
+optional */
  envFrom?: V1EnvFromSource[]
  /** Container image name.
More info: https://kubernetes.io/docs/concepts/containers/images
This field is optional to allow higher level config management to default or override
container images in workload controllers like Deployments and StatefulSets.
+optional */
  image?: string
  /** Image pull policy.
One of Always, Never, IfNotPresent.
Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
+optional */
  imagePullPolicy?: string
  lifecycle?: V1Lifecycle
  livenessProbe?: V1Probe
  /** Name of the container specified as a DNS_LABEL.
Each container in a pod must have a unique name (DNS_LABEL).
Cannot be updated. */
  name?: string
  /** List of ports to expose from the container. Not specifying a port here
DOES NOT prevent that port from being exposed. Any port which is
listening on the default "0.0.0.0" address inside a container will be
accessible from the network.
Modifying this array with strategic merge patch may corrupt the data.
For more information See https://github.com/kubernetes/kubernetes/issues/108255.
Cannot be updated.
+optional
+patchMergeKey=containerPort
+patchStrategy=merge
+listType=map
+listMapKey=containerPort
+listMapKey=protocol */
  ports?: V1ContainerPort[]
  readinessProbe?: V1Probe
  /** Resources resize policy for the container.
+featureGate=InPlacePodVerticalScaling
+optional
+listType=atomic */
  resizePolicy?: V1ContainerResizePolicy[]
  resources?: V1ResourceRequirements
  /** RestartPolicy defines the restart behavior of individual containers in a pod.
This field may only be set for init containers, and the only allowed value is "Always".
For non-init containers or when this field is not specified,
the restart behavior is defined by the Pod's restart policy and the container type.
Setting the RestartPolicy as "Always" for the init container will have the following effect:
this init container will be continually restarted on
exit until all regular containers have terminated. Once all regular
containers have completed, all init containers with restartPolicy "Always"
will be shut down. This lifecycle differs from normal init containers and
is often referred to as a "sidecar" container. Although this init
container still starts in the init container sequence, it does not wait
for the container to complete before proceeding to the next init
container. Instead, the next init container starts immediately after this
init container is started, or after any startupProbe has successfully
completed.
+featureGate=SidecarContainers
+optional */
  restartPolicy?: string
  securityContext?: V1SecurityContext
  startupProbe?: V1Probe
  /** Whether this container should allocate a buffer for stdin in the container runtime. If this
is not set, reads from stdin in the container will always result in EOF.
Default is false.
+optional */
  stdin?: boolean
  /** Whether the container runtime should close the stdin channel after it has been opened by
a single attach. When stdin is true the stdin stream will remain open across multiple attach
sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
first client attaches to stdin, and then remains open and accepts data until the client disconnects,
at which time stdin is closed and remains closed until the container is restarted. If this
flag is false, a container processes that reads from stdin will never receive an EOF.
Default is false
+optional */
  stdinOnce?: boolean
  /** Optional: Path at which the file to which the container's termination message
will be written is mounted into the container's filesystem.
Message written is intended to be brief final status, such as an assertion failure message.
Will be truncated by the node if greater than 4096 bytes. The total message length across
all containers will be limited to 12kb.
Defaults to /dev/termination-log.
Cannot be updated.
+optional */
  terminationMessagePath?: string
  /** Indicate how the termination message should be populated. File will use the contents of
terminationMessagePath to populate the container status message on both success and failure.
FallbackToLogsOnError will use the last chunk of container log output if the termination
message file is empty and the container exited with an error.
The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
Defaults to File.
Cannot be updated.
+optional */
  terminationMessagePolicy?: string
  /** Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
Default is false.
+optional */
  tty?: boolean
  /** volumeDevices is the list of block devices to be used by the container.
+patchMergeKey=devicePath
+patchStrategy=merge
+optional */
  volumeDevices?: V1VolumeDevice[]
  /** Pod volumes to mount into the container's filesystem.
Cannot be updated.
+optional
+patchMergeKey=mountPath
+patchStrategy=merge */
  volumeMounts?: V1VolumeMount[]
  /** Container's working directory.
If not specified, the container runtime's default will be used, which
might be configured in the container image.
Cannot be updated.
+optional */
  workingDir?: string
}

export interface V1ContainerPort {
  /** Number of port to expose on the pod's IP address.
This must be a valid port number, 0 < x < 65536. */
  containerPort?: number
  /** What host IP to bind the external port to.
+optional */
  hostIP?: string
  /** Number of port to expose on the host.
If specified, this must be a valid port number, 0 < x < 65536.
If HostNetwork is specified, this must match ContainerPort.
Most containers do not need this.
+optional */
  hostPort?: number
  /** If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
named port in a pod must have a unique name. Name for the port that can be
referred to by services.
+optional */
  name?: string
  /** Protocol for port. Must be UDP, TCP, or SCTP.
Defaults to "TCP".
+optional
+default="TCP" */
  protocol?: string
}

export interface V1ContainerResizePolicy {
  /** Name of the resource to which this resource resize policy applies.
Supported values: cpu, memory. */
  resourceName?: string
  /** Restart policy to apply when specified resource is resized.
If not specified, it defaults to NotRequired. */
  restartPolicy?: string
}

export interface V1DownwardAPIProjection {
  /** Items is a list of DownwardAPIVolume file
+optional */
  items?: V1DownwardAPIVolumeFile[]
}

export interface V1DownwardAPIVolumeFile {
  fieldRef?: V1ObjectFieldSelector
  /** Optional: mode bits used to set permissions on this file, must be an octal value
between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
+optional */
  mode?: number
  /** Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' */
  path?: string
  resourceFieldRef?: V1ResourceFieldSelector
}

export interface V1DownwardAPIVolumeSource {
  /** Optional: mode bits to use on created files by default. Must be a
Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
+optional */
  defaultMode?: number
  /** Items is a list of downward API volume file
+optional */
  items?: V1DownwardAPIVolumeFile[]
}

export interface V1EmptyDirVolumeSource {
  /** medium represents what type of storage medium should back this directory.
The default is "" which means to use the node's default medium.
Must be an empty string (default) or Memory.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
+optional */
  medium?: string
  sizeLimit?: ResourceQuantity
}

export interface V1EnvFromSource {
  configMapRef?: V1ConfigMapEnvSource
  /** An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
+optional */
  prefix?: string
  secretRef?: V1SecretEnvSource
}

export interface V1EnvVar {
  /** Name of the environment variable. Must be a C_IDENTIFIER. */
  name?: string
  /** Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
+optional */
  value?: string
  valueFrom?: V1EnvVarSource
}

export interface V1EnvVarSource {
  configMapKeyRef?: V1ConfigMapKeySelector
  fieldRef?: V1ObjectFieldSelector
  resourceFieldRef?: V1ResourceFieldSelector
  secretKeyRef?: V1SecretKeySelector
}

export interface V1EphemeralVolumeSource {
  volumeClaimTemplate?: V1PersistentVolumeClaimTemplate
}

export interface V1ExecAction {
  /** Command is the command line to execute inside the container, the working directory for the
command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
a shell, you need to explicitly call out to that shell.
Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
+optional */
  command?: string[]
}

export interface V1FCVolumeSource {
  /** fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
TODO: how do we prevent errors in the filesystem from compromising the machine
+optional */
  fsType?: string
  /** lun is Optional: FC target lun number
+optional */
  lun?: number
  /** readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
+optional */
  readOnly?: boolean
  /** targetWWNs is Optional: FC target worldwide names (WWNs)
+optional */
  targetWWNs?: string[]
  /** wwids Optional: FC volume world wide identifiers (wwids)
Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
+optional */
  wwids?: string[]
}

export interface V1FieldsV1 {
  [key: string]: unknown
}

/**
 * options is Optional: this field holds extra command options if any.
+optional
 */
export type V1FlexVolumeSourceOptions = { [key: string]: string }

export interface V1FlexVolumeSource {
  /** driver is the name of the driver to use for this volume. */
  driver?: string
  /** fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
+optional */
  fsType?: string
  /** options is Optional: this field holds extra command options if any.
+optional */
  options?: V1FlexVolumeSourceOptions
  /** readOnly is Optional: defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
+optional */
  readOnly?: boolean
  secretRef?: V1LocalObjectReference
}

export interface V1FlockerVolumeSource {
  /** datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
should be considered as deprecated
+optional */
  datasetName?: string
  /** datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
+optional */
  datasetUUID?: string
}

export interface V1GCEPersistentDiskVolumeSource {
  /** fsType is filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
TODO: how do we prevent errors in the filesystem from compromising the machine
+optional */
  fsType?: string
  /** partition is the partition in the volume that you want to mount.
If omitted, the default is to mount by volume name.
Examples: For volume /dev/sda1, you specify the partition as "1".
Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
+optional */
  partition?: number
  /** pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk */
  pdName?: string
  /** readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
+optional */
  readOnly?: boolean
}

export interface V1GRPCAction {
  /** Port number of the gRPC service. Number must be in the range 1 to 65535. */
  port?: number
  /** Service is the name of the service to place in the gRPC HealthCheckRequest
(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

If this is not specified, the default behavior is defined by gRPC.
+optional
+default="" */
  service?: string
}

export interface V1GitRepoVolumeSource {
  /** directory is the target directory name.
Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
git repository.  Otherwise, if specified, the volume will contain the git repository in
the subdirectory with the given name.
+optional */
  directory?: string
  /** repository is the URL */
  repository?: string
  /** revision is the commit hash for the specified revision.
+optional */
  revision?: string
}

export interface V1GlusterfsVolumeSource {
  /** endpoints is the endpoint name that details Glusterfs topology.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod */
  endpoints?: string
  /** path is the Glusterfs volume path.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod */
  path?: string
  /** readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
Defaults to false.
More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
+optional */
  readOnly?: boolean
}

export interface V1HTTPGetAction {
  /** Host name to connect to, defaults to the pod IP. You probably want to set
"Host" in httpHeaders instead.
+optional */
  host?: string
  /** Custom headers to set in the request. HTTP allows repeated headers.
+optional */
  httpHeaders?: V1HTTPHeader[]
  /** Path to access on the HTTP server.
+optional */
  path?: string
  port?: IntstrIntOrString
  /** Scheme to use for connecting to the host.
Defaults to HTTP.
+optional */
  scheme?: string
}

export interface V1HTTPHeader {
  /** The header field name.
This will be canonicalized upon output, so case-variant names will be understood as the same header. */
  name?: string
  /** The header field value */
  value?: string
}

export interface V1HostPathVolumeSource {
  /** path of the directory on the host.
If the path is a symlink, it will follow the link to the real path.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath */
  path?: string
  /** type for HostPath Volume
Defaults to ""
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
+optional */
  type?: string
}

export interface V1ISCSIVolumeSource {
  /** chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
+optional */
  chapAuthDiscovery?: boolean
  /** chapAuthSession defines whether support iSCSI Session CHAP authentication
+optional */
  chapAuthSession?: boolean
  /** fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
TODO: how do we prevent errors in the filesystem from compromising the machine
+optional */
  fsType?: string
  /** initiatorName is the custom iSCSI Initiator Name.
If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
<target portal>:<volume name> will be created for the connection.
+optional */
  initiatorName?: string
  /** iqn is the target iSCSI Qualified Name. */
  iqn?: string
  /** iscsiInterface is the interface Name that uses an iSCSI transport.
Defaults to 'default' (tcp).
+optional */
  iscsiInterface?: string
  /** lun represents iSCSI Target Lun number. */
  lun?: number
  /** portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260).
+optional */
  portals?: string[]
  /** readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
+optional */
  readOnly?: boolean
  secretRef?: V1LocalObjectReference
  /** targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
is other than default (typically TCP ports 860 and 3260). */
  targetPortal?: string
}

export interface V1KeyToPath {
  /** key is the key to project. */
  key?: string
  /** mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
+optional */
  mode?: number
  /** path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'. */
  path?: string
}

/**
 * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
+optional
 */
export type V1LabelSelectorMatchLabels = { [key: string]: string }

export interface V1LabelSelector {
  /** matchExpressions is a list of label selector requirements. The requirements are ANDed.
+optional */
  matchExpressions?: V1LabelSelectorRequirement[]
  /** matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.
+optional */
  matchLabels?: V1LabelSelectorMatchLabels
}

export interface V1LabelSelectorRequirement {
  /** key is the label key that the selector applies to. */
  key?: string
  /** operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist. */
  operator?: string
  /** values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.
+optional */
  values?: string[]
}

export interface V1Lifecycle {
  postStart?: V1LifecycleHandler
  preStop?: V1LifecycleHandler
}

export interface V1LifecycleHandler {
  exec?: V1ExecAction
  httpGet?: V1HTTPGetAction
  tcpSocket?: V1TCPSocketAction
}

export interface V1LocalObjectReference {
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
}

export interface V1ManagedFieldsEntry {
  /** APIVersion defines the version of this resource that this field set
applies to. The format is "group/version" just like the top-level
APIVersion field. It is necessary to track the version of a field
set because it cannot be automatically converted. */
  apiVersion?: string
  /** FieldsType is the discriminator for the different fields format and version.
There is currently only one possible value: "FieldsV1" */
  fieldsType?: string
  fieldsV1?: V1FieldsV1
  /** Manager is an identifier of the workflow managing these fields. */
  manager?: string
  /** Operation is the type of operation which lead to this ManagedFieldsEntry being created.
The only valid values for this field are 'Apply' and 'Update'. */
  operation?: string
  /** Subresource is the name of the subresource used to update that object, or
empty string if the object was updated through the main resource. The
value of this field is used to distinguish between managers, even if they
share the same name. For example, a status update will be distinct from a
regular update using the same manager name.
Note that the APIVersion field is not related to the Subresource field and
it always corresponds to the version of the main resource. */
  subresource?: string
  /** Time is the timestamp of when the ManagedFields entry was added. The
timestamp will also be updated if a field is added, the manager
changes any of the owned fields value or removes a field. The
timestamp does not update when a field is removed from the entry
because another manager took it over.
+optional */
  time?: string
}

export interface V1NFSVolumeSource {
  /** path that is exported by the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs */
  path?: string
  /** readOnly here will force the NFS export to be mounted with read-only permissions.
Defaults to false.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
+optional */
  readOnly?: boolean
  /** server is the hostname or IP address of the NFS server.
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs */
  server?: string
}

export interface V1ObjectFieldSelector {
  /** Version of the schema the FieldPath is written in terms of, defaults to "v1".
+optional */
  apiVersion?: string
  /** Path of the field to select in the specified API version. */
  fieldPath?: string
}

export interface V1ObjectReference {
  /** API version of the referent.
+optional */
  apiVersion?: string
  /** If referring to a piece of an object instead of an entire object, this string
should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
For example, if the object reference is to a container within a pod, this would take on a value like:
"spec.containers{name}" (where "name" refers to the name of the container that triggered
the event) or if no container name is specified "spec.containers[2]" (container with
index 2 in this pod). This syntax is chosen only to have some well-defined way of
referencing a part of an object.
TODO: this design is not final and this field is subject to change in the future.
+optional */
  fieldPath?: string
  /** Kind of the referent.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
+optional */
  kind?: string
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
+optional */
  name?: string
  /** Namespace of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
+optional */
  namespace?: string
  /** Specific resourceVersion to which this reference is made, if any.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
+optional */
  resourceVersion?: string
  /** UID of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
+optional */
  uid?: string
}

export interface V1OwnerReference {
  /** API version of the referent. */
  apiVersion?: string
  /** If true, AND if the owner has the "foregroundDeletion" finalizer, then
the owner cannot be deleted from the key-value store until this
reference is removed.
See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
for how the garbage collector interacts with this field and enforces the foreground deletion.
Defaults to false.
To set this field, a user needs "delete" permission of the owner,
otherwise 422 (Unprocessable Entity) will be returned.
+optional */
  blockOwnerDeletion?: boolean
  /** If true, this reference points to the managing controller.
+optional */
  controller?: boolean
  /** Kind of the referent.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
  kind?: string
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */
  name?: string
  /** UID of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */
  uid?: string
}

export interface V1PersistentVolumeClaimSpec {
  /** accessModes contains the desired access modes the volume should have.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
+optional */
  accessModes?: string[]
  dataSource?: V1TypedLocalObjectReference
  dataSourceRef?: V1TypedObjectReference
  resources?: V1ResourceRequirements
  selector?: V1LabelSelector
  /** storageClassName is the name of the StorageClass required by the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
+optional */
  storageClassName?: string
  /** volumeMode defines what type of volume is required by the claim.
Value of Filesystem is implied when not included in claim spec.
+optional */
  volumeMode?: string
  /** volumeName is the binding reference to the PersistentVolume backing this claim.
+optional */
  volumeName?: string
}

/**
 * Annotations is an unstructured key value map stored with a resource that may be
set by external tools to store and retrieve arbitrary metadata. They are not
queryable and should be preserved when modifying objects.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
+optional
 */
export type V1PersistentVolumeClaimTemplateAnnotations = { [key: string]: string }

/**
 * Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and services.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
+optional
 */
export type V1PersistentVolumeClaimTemplateLabels = { [key: string]: string }

export interface V1PersistentVolumeClaimTemplate {
  /** Annotations is an unstructured key value map stored with a resource that may be
set by external tools to store and retrieve arbitrary metadata. They are not
queryable and should be preserved when modifying objects.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
+optional */
  annotations?: V1PersistentVolumeClaimTemplateAnnotations
  /** CreationTimestamp is a timestamp representing the server time when this object was
created. It is not guaranteed to be set in happens-before order across separate operations.
Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system.
Read-only.
Null for lists.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
+optional */
  creationTimestamp?: string
  /** Number of seconds allowed for this object to gracefully terminate before
it will be removed from the system. Only set when deletionTimestamp is also set.
May only be shortened.
Read-only.
+optional */
  deletionGracePeriodSeconds?: number
  /** DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
field is set by the server when a graceful deletion is requested by the user, and is not
directly settable by a client. The resource is expected to be deleted (no longer visible
from resource lists, and not reachable by name) after the time in this field, once the
finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
Once the deletionTimestamp is set, this value may not be unset or be set further into the
future, although it may be shortened or the resource may be deleted prior to this time.
For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
remove the pod from the API. In the presence of network partitions, this object may still
exist after this timestamp, until an administrator or automated process can determine the
resource is fully terminated.
If not set, graceful deletion of the object has not been requested.

Populated by the system when a graceful deletion is requested.
Read-only.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
+optional */
  deletionTimestamp?: string
  /** Must be empty before the object is deleted from the registry. Each entry
is an identifier for the responsible component that will remove the entry
from the list. If the deletionTimestamp of the object is non-nil, entries
in this list can only be removed.
Finalizers may be processed and removed in any order.  Order is NOT enforced
because it introduces significant risk of stuck finalizers.
finalizers is a shared field, any actor with permission can reorder it.
If the finalizer list is processed in order, then this can lead to a situation
in which the component responsible for the first finalizer in the list is
waiting for a signal (field value, external system, or other) produced by a
component responsible for a finalizer later in the list, resulting in a deadlock.
Without enforced ordering finalizers are free to order amongst themselves and
are not vulnerable to ordering changes in the list.
+optional
+patchStrategy=merge */
  finalizers?: string[]
  /** GenerateName is an optional prefix, used by the server, to generate a unique
name ONLY IF the Name field has not been provided.
If this field is used, the name returned to the client will be different
than the name passed. This value will also be combined with a unique suffix.
The provided value has the same validation rules as the Name field,
and may be truncated by the length of the suffix required to make the value
unique on the server.

If this field is specified and the generated name exists, the server will return a 409.

Applied only if Name is not specified.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
+optional */
  generateName?: string
  /** A sequence number representing a specific generation of the desired state.
Populated by the system. Read-only.
+optional */
  generation?: number
  /** Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and services.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
+optional */
  labels?: V1PersistentVolumeClaimTemplateLabels
  /** ManagedFields maps workflow-id and version to the set of fields
that are managed by that workflow. This is mostly for internal
housekeeping, and users typically shouldn't need to set or
understand this field. A workflow can be the user's name, a
controller's name, or the name of a specific apply path like
"ci-cd". The set of fields is always in the version that the
workflow used when modifying the object.

+optional */
  managedFields?: V1ManagedFieldsEntry[]
  /** Name must be unique within a namespace. Is required when creating resources, although
some resources may allow a client to request the generation of an appropriate name
automatically. Name is primarily intended for creation idempotence and configuration
definition.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
+optional */
  name?: string
  /** Namespace defines the space within which each name must be unique. An empty namespace is
equivalent to the "default" namespace, but "default" is the canonical representation.
Not all objects are required to be scoped to a namespace - the value of this field for
those objects will be empty.

Must be a DNS_LABEL.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
+optional */
  namespace?: string
  /** List of objects depended by this object. If ALL objects in the list have
been deleted, this object will be garbage collected. If this object is managed by a controller,
then an entry in this list will point to this controller, with the controller field set to true.
There cannot be more than one managing controller.
+optional
+patchMergeKey=uid
+patchStrategy=merge */
  ownerReferences?: V1OwnerReference[]
  /** An opaque value that represents the internal version of this object that can
be used by clients to determine when objects have changed. May be used for optimistic
concurrency, change detection, and the watch operation on a resource or set of resources.
Clients must treat these values as opaque and passed unmodified back to the server.
They may only be valid for a particular resource or set of resources.

Populated by the system.
Read-only.
Value must be treated as opaque by clients and .
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
+optional */
  resourceVersion?: string
  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
+optional */
  selfLink?: string
  spec?: V1PersistentVolumeClaimSpec
  /** UID is the unique in time and space value for this object. It is typically generated by
the server on successful creation of a resource and is not allowed to change on PUT
operations.

Populated by the system.
Read-only.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
+optional */
  uid?: string
}

export interface V1PersistentVolumeClaimVolumeSource {
  /** claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims */
  claimName?: string
  /** readOnly Will force the ReadOnly setting in VolumeMounts.
Default false.
+optional */
  readOnly?: boolean
}

export interface V1PhotonPersistentDiskVolumeSource {
  /** fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. */
  fsType?: string
  /** pdID is the ID that identifies Photon Controller persistent disk */
  pdID?: string
}

export interface V1PortworxVolumeSource {
  /** fSType represents the filesystem type to mount
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified. */
  fsType?: string
  /** readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
+optional */
  readOnly?: boolean
  /** volumeID uniquely identifies a Portworx volume */
  volumeID?: string
}

export interface V1Probe {
  exec?: V1ExecAction
  /** Minimum consecutive failures for the probe to be considered failed after having succeeded.
Defaults to 3. Minimum value is 1.
+optional */
  failureThreshold?: number
  grpc?: V1GRPCAction
  httpGet?: V1HTTPGetAction
  /** Number of seconds after the container has started before liveness probes are initiated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
+optional */
  initialDelaySeconds?: number
  /** How often (in seconds) to perform the probe.
Default to 10 seconds. Minimum value is 1.
+optional */
  periodSeconds?: number
  /** Minimum consecutive successes for the probe to be considered successful after having failed.
Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
+optional */
  successThreshold?: number
  tcpSocket?: V1TCPSocketAction
  /** Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
The grace period is the duration in seconds after the processes running in the pod are sent
a termination signal and the time when the processes are forcibly halted with a kill signal.
Set this value longer than the expected cleanup time for your process.
If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
value overrides the value provided by the pod spec.
Value must be non-negative integer. The value zero indicates stop immediately via
the kill signal (no opportunity to shut down).
This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
+optional */
  terminationGracePeriodSeconds?: number
  /** Number of seconds after which the probe times out.
Defaults to 1 second. Minimum value is 1.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
+optional */
  timeoutSeconds?: number
}

export interface V1ProjectedVolumeSource {
  /** defaultMode are the mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
+optional */
  defaultMode?: number
  /** sources is the list of volume projections
+optional */
  sources?: V1VolumeProjection[]
}

export interface V1QuobyteVolumeSource {
  /** group to map volume access to
Default is no group
+optional */
  group?: string
  /** readOnly here will force the Quobyte volume to be mounted with read-only permissions.
Defaults to false.
+optional */
  readOnly?: boolean
  /** registry represents a single or multiple Quobyte Registry services
specified as a string as host:port pair (multiple entries are separated with commas)
which acts as the central registry for volumes */
  registry?: string
  /** tenant owning the given Quobyte volume in the Backend
Used with dynamically provisioned Quobyte volumes, value is set by the plugin
+optional */
  tenant?: string
  /** user to map volume access to
Defaults to serivceaccount user
+optional */
  user?: string
  /** volume is a string that references an already created Quobyte volume by name. */
  volume?: string
}

export interface V1RBDVolumeSource {
  /** fsType is the filesystem type of the volume that you want to mount.
Tip: Ensure that the filesystem type is supported by the host operating system.
Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
TODO: how do we prevent errors in the filesystem from compromising the machine
+optional */
  fsType?: string
  /** image is the rados image name.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it */
  image?: string
  /** keyring is the path to key ring for RBDUser.
Default is /etc/ceph/keyring.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
+optional */
  keyring?: string
  /** monitors is a collection of Ceph monitors.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it */
  monitors?: string[]
  /** pool is the rados pool name.
Default is rbd.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
+optional */
  pool?: string
  /** readOnly here will force the ReadOnly setting in VolumeMounts.
Defaults to false.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
+optional */
  readOnly?: boolean
  secretRef?: V1LocalObjectReference
  /** user is the rados user name.
Default is admin.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
+optional */
  user?: string
}

export interface V1ResourceClaim {
  /** Name must match the name of one entry in pod.spec.resourceClaims of
the Pod where this field is used. It makes that resource available
inside a container. */
  name?: string
}

export interface V1ResourceFieldSelector {
  /** Container name: required for volumes, optional for env vars
+optional */
  containerName?: string
  divisor?: ResourceQuantity
  /** Required: resource to select */
  resource?: string
}

export interface V1ResourceList {
  [key: string]: ResourceQuantity
}

export interface V1ResourceRequirements {
  /** Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.

This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.

This field is immutable. It can only be set for containers.

+listType=map
+listMapKey=name
+featureGate=DynamicResourceAllocation
+optional */
  claims?: V1ResourceClaim[]
  limits?: V1ResourceList
  requests?: V1ResourceList
}

export interface V1SELinuxOptions {
  /** Level is SELinux level label that applies to the container.
+optional */
  level?: string
  /** Role is a SELinux role label that applies to the container.
+optional */
  role?: string
  /** Type is a SELinux type label that applies to the container.
+optional */
  type?: string
  /** User is a SELinux user label that applies to the container.
+optional */
  user?: string
}

export interface V1ScaleIOVolumeSource {
  /** fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs".
Default is "xfs".
+optional */
  fsType?: string
  /** gateway is the host address of the ScaleIO API Gateway. */
  gateway?: string
  /** protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
+optional */
  protectionDomain?: string
  /** readOnly Defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
+optional */
  readOnly?: boolean
  secretRef?: V1LocalObjectReference
  /** sslEnabled Flag enable/disable SSL communication with Gateway, default false
+optional */
  sslEnabled?: boolean
  /** storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
Default is ThinProvisioned.
+optional */
  storageMode?: string
  /** storagePool is the ScaleIO Storage Pool associated with the protection domain.
+optional */
  storagePool?: string
  /** system is the name of the storage system as configured in ScaleIO. */
  system?: string
  /** volumeName is the name of a volume already created in the ScaleIO system
that is associated with this volume source. */
  volumeName?: string
}

export interface V1SeccompProfile {
  /** localhostProfile indicates a profile defined in a file on the node should be used.
The profile must be preconfigured on the node to work.
Must be a descending path, relative to the kubelet's configured seccomp profile location.
Must be set if type is "Localhost". Must NOT be set for any other type.
+optional */
  localhostProfile?: string
  /** type indicates which kind of seccomp profile will be applied.
Valid options are:

Localhost - a profile defined in a file on the node should be used.
RuntimeDefault - the container runtime default profile should be used.
Unconfined - no profile should be applied.
+unionDiscriminator */
  type?: string
}

export interface V1SecretEnvSource {
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
  /** Specify whether the Secret must be defined
+optional */
  optional?: boolean
}

export interface V1SecretKeySelector {
  /** The key of the secret to select from.  Must be a valid secret key. */
  key?: string
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
  /** Specify whether the Secret or its key must be defined
+optional */
  optional?: boolean
}

export interface V1SecretProjection {
  /** items if unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
+optional */
  items?: V1KeyToPath[]
  /** Name of the referent.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
TODO: Add other useful fields. apiVersion, kind, uid?
+optional */
  name?: string
  /** optional field specify whether the Secret or its key must be defined
+optional */
  optional?: boolean
}

export interface V1SecretVolumeSource {
  /** defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.
+optional */
  defaultMode?: number
  /** items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
+optional */
  items?: V1KeyToPath[]
  /** optional field specify whether the Secret or its keys must be defined
+optional */
  optional?: boolean
  /** secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
+optional */
  secretName?: string
}

export interface V1SecurityContext {
  /** AllowPrivilegeEscalation controls whether a process can gain more
privileges than its parent process. This bool directly controls if
the no_new_privs flag will be set on the container process.
AllowPrivilegeEscalation is true always when the container is:
1) run as Privileged
2) has CAP_SYS_ADMIN
Note that this field cannot be set when spec.os.name is windows.
+optional */
  allowPrivilegeEscalation?: boolean
  capabilities?: V1Capabilities
  /** Run container in privileged mode.
Processes in privileged containers are essentially equivalent to root on the host.
Defaults to false.
Note that this field cannot be set when spec.os.name is windows.
+optional */
  privileged?: boolean
  /** procMount denotes the type of proc mount to use for the containers.
The default is DefaultProcMount which uses the container runtime defaults for
readonly paths and masked paths.
This requires the ProcMountType feature flag to be enabled.
Note that this field cannot be set when spec.os.name is windows.
+optional */
  procMount?: string
  /** Whether this container has a read-only root filesystem.
Default is false.
Note that this field cannot be set when spec.os.name is windows.
+optional */
  readOnlyRootFilesystem?: boolean
  /** The GID to run the entrypoint of the container process.
Uses runtime default if unset.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
+optional */
  runAsGroup?: number
  /** Indicates that the container must run as a non-root user.
If true, the Kubelet will validate the image at runtime to ensure that it
does not run as UID 0 (root) and fail to start the container if it does.
If unset or false, no such validation will be performed.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
+optional */
  runAsNonRoot?: boolean
  /** The UID to run the entrypoint of the container process.
Defaults to user specified in image metadata if unspecified.
May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
+optional */
  runAsUser?: number
  seLinuxOptions?: V1SELinuxOptions
  seccompProfile?: V1SeccompProfile
  windowsOptions?: V1WindowsSecurityContextOptions
}

export interface V1ServiceAccountTokenProjection {
  /** audience is the intended audience of the token. A recipient of a token
must identify itself with an identifier specified in the audience of the
token, and otherwise should reject the token. The audience defaults to the
identifier of the apiserver.
+optional */
  audience?: string
  /** expirationSeconds is the requested duration of validity of the service
account token. As the token approaches expiration, the kubelet volume
plugin will proactively rotate the service account token. The kubelet will
start trying to rotate the token if the token is older than 80 percent of
its time to live or if the token is older than 24 hours.Defaults to 1 hour
and must be at least 10 minutes.
+optional */
  expirationSeconds?: number
  /** path is the path relative to the mount point of the file to project the
token into. */
  path?: string
}

export interface V1StorageOSVolumeSource {
  /** fsType is the filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
+optional */
  fsType?: string
  /** readOnly defaults to false (read/write). ReadOnly here will force
the ReadOnly setting in VolumeMounts.
+optional */
  readOnly?: boolean
  secretRef?: V1LocalObjectReference
  /** volumeName is the human-readable name of the StorageOS volume.  Volume
names are only unique within a namespace. */
  volumeName?: string
  /** volumeNamespace specifies the scope of the volume within StorageOS.  If no
namespace is specified then the Pod's namespace will be used.  This allows the
Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
Set VolumeName to any name to override the default behaviour.
Set to "default" if you are not using namespaces within StorageOS.
Namespaces that do not pre-exist within StorageOS will be created.
+optional */
  volumeNamespace?: string
}

export interface V1TCPSocketAction {
  /** Optional: Host name to connect to, defaults to the pod IP.
+optional */
  host?: string
  port?: IntstrIntOrString
}

export interface V1TypedLocalObjectReference {
  /** APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
+optional */
  apiGroup?: string
  /** Kind is the type of resource being referenced */
  kind?: string
  /** Name is the name of resource being referenced */
  name?: string
}

export interface V1TypedObjectReference {
  /** APIGroup is the group for the resource being referenced.
If APIGroup is not specified, the specified Kind must be in the core API group.
For any other third-party types, APIGroup is required.
+optional */
  apiGroup?: string
  /** Kind is the type of resource being referenced */
  kind?: string
  /** Name is the name of resource being referenced */
  name?: string
  /** Namespace is the namespace of resource being referenced
Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
+featureGate=CrossNamespaceVolumeDataSource
+optional */
  namespace?: string
}

export interface V1Volume {
  awsElasticBlockStore?: V1AWSElasticBlockStoreVolumeSource
  azureDisk?: V1AzureDiskVolumeSource
  azureFile?: V1AzureFileVolumeSource
  cephfs?: V1CephFSVolumeSource
  cinder?: V1CinderVolumeSource
  configMap?: V1ConfigMapVolumeSource
  csi?: V1CSIVolumeSource
  downwardAPI?: V1DownwardAPIVolumeSource
  emptyDir?: V1EmptyDirVolumeSource
  ephemeral?: V1EphemeralVolumeSource
  fc?: V1FCVolumeSource
  flexVolume?: V1FlexVolumeSource
  flocker?: V1FlockerVolumeSource
  gcePersistentDisk?: V1GCEPersistentDiskVolumeSource
  gitRepo?: V1GitRepoVolumeSource
  glusterfs?: V1GlusterfsVolumeSource
  hostPath?: V1HostPathVolumeSource
  iscsi?: V1ISCSIVolumeSource
  /** name of the volume.
Must be a DNS_LABEL and unique within the pod.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
  name?: string
  nfs?: V1NFSVolumeSource
  persistentVolumeClaim?: V1PersistentVolumeClaimVolumeSource
  photonPersistentDisk?: V1PhotonPersistentDiskVolumeSource
  portworxVolume?: V1PortworxVolumeSource
  projected?: V1ProjectedVolumeSource
  quobyte?: V1QuobyteVolumeSource
  rbd?: V1RBDVolumeSource
  scaleIO?: V1ScaleIOVolumeSource
  secret?: V1SecretVolumeSource
  storageos?: V1StorageOSVolumeSource
  vsphereVolume?: V1VsphereVirtualDiskVolumeSource
}

export interface V1VolumeDevice {
  /** devicePath is the path inside of the container that the device will be mapped to. */
  devicePath?: string
  /** name must match the name of a persistentVolumeClaim in the pod */
  name?: string
}

export interface V1VolumeMount {
  /** Path within the container at which the volume should be mounted.  Must
not contain ':'. */
  mountPath?: string
  /** mountPropagation determines how mounts are propagated from the host
to container and the other way around.
When not set, MountPropagationNone is used.
This field is beta in 1.10.
+optional */
  mountPropagation?: string
  /** This must match the Name of a Volume. */
  name?: string
  /** Mounted read-only if true, read-write otherwise (false or unspecified).
Defaults to false.
+optional */
  readOnly?: boolean
  /** Path within the volume from which the container's volume should be mounted.
Defaults to "" (volume's root).
+optional */
  subPath?: string
  /** Expanded path within the volume from which the container's volume should be mounted.
Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
Defaults to "" (volume's root).
SubPathExpr and SubPath are mutually exclusive.
+optional */
  subPathExpr?: string
}

export interface V1VolumeProjection {
  configMap?: V1ConfigMapProjection
  downwardAPI?: V1DownwardAPIProjection
  secret?: V1SecretProjection
  serviceAccountToken?: V1ServiceAccountTokenProjection
}

export interface V1VsphereVirtualDiskVolumeSource {
  /** fsType is filesystem type to mount.
Must be a filesystem type supported by the host operating system.
Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
+optional */
  fsType?: string
  /** storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
+optional */
  storagePolicyID?: string
  /** storagePolicyName is the storage Policy Based Management (SPBM) profile name.
+optional */
  storagePolicyName?: string
  /** volumePath is the path that identifies vSphere volume vmdk */
  volumePath?: string
}

export interface V1WindowsSecurityContextOptions {
  /** GMSACredentialSpec is where the GMSA admission webhook
(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
GMSA credential spec named by the GMSACredentialSpecName field.
+optional */
  gmsaCredentialSpec?: string
  /** GMSACredentialSpecName is the name of the GMSA credential spec to use.
+optional */
  gmsaCredentialSpecName?: string
  /** HostProcess determines if a container should be run as a 'Host Process' container.
All of a Pod's containers must have the same effective HostProcess value
(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
In addition, if HostProcess is true then HostNetwork must also be set to true.
+optional */
  hostProcess?: boolean
  /** The UserName in Windows to run the entrypoint of the container process.
Defaults to the user specified in image metadata if unspecified.
May also be set in PodSecurityContext. If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
+optional */
  runAsUserName?: string
}

export interface V1alpha1AWSChaosSpec {
  /** Action defines the specific aws chaos action.
Supported action: ec2-stop / ec2-restart / detach-volume
Default action: ec2-stop
+kubebuilder:validation:Enum=ec2-stop;ec2-restart;detach-volume */
  action?: string
  /** AWSRegion defines the region of aws. */
  awsRegion?: string
  /** DeviceName indicates the name of the device.
Needed in detach-volume.
+ui:form:when=action=='detach-volume'
+optional */
  deviceName?: string
  /** Duration represents the duration of the chaos action.
+optional */
  duration?: string
  /** Ec2Instance indicates the ID of the ec2 instance. */
  ec2Instance?: string
  /** Endpoint indicates the endpoint of the aws server. Just used it in test now.
+ui:form:ignore
+optional */
  endpoint?: string
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  /** SecretName defines the name of kubernetes secret.
+optional */
  secretName?: string
  /** EbsVolume indicates the ID of the EBS volume.
Needed in detach-volume.
+ui:form:when=action=='detach-volume'
+optional */
  volumeID?: string
}

export interface V1alpha1AttrOverrideSpec {
  atime?: V1alpha1Timespec
  /** +optional */
  blocks?: number
  ctime?: V1alpha1Timespec
  /** +optional */
  gid?: number
  /** +optional */
  ino?: number
  /** +optional */
  kind?: string
  mtime?: V1alpha1Timespec
  /** +optional */
  nlink?: number
  /** +optional */
  perm?: number
  /** +optional */
  rdev?: number
  /** +optional */
  size?: number
  /** +optional */
  uid?: number
}

export interface V1alpha1AzureChaosSpec {
  /** Action defines the specific azure chaos action.
Supported action: vm-stop / vm-restart / disk-detach
Default action: vm-stop
+kubebuilder:validation:Enum=vm-stop;vm-restart;disk-detach */
  action?: string
  /** DiskName indicates the name of the disk.
Needed in disk-detach.
+optional */
  diskName?: string
  /** Duration represents the duration of the chaos action.
+optional */
  duration?: string
  /** LUN indicates the Logical Unit Number of the data disk.
Needed in disk-detach.
+optional */
  lun?: number
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  /** ResourceGroupName defines the name of ResourceGroup */
  resourceGroupName?: string
  /** SecretName defines the name of kubernetes secret. It is used for Azure credentials.
+optional */
  secretName?: string
  /** SubscriptionID defines the id of Azure subscription. */
  subscriptionID?: string
  /** VMName defines the name of Virtual Machine */
  vmName?: string
}

export interface V1alpha1BandwidthSpec {
  /** Buffer is the maximum amount of bytes that tokens can be available for instantaneously.
+kubebuilder:validation:Minimum=1 */
  buffer?: number
  /** Limit is the number of bytes that can be queued waiting for tokens to become available.
+kubebuilder:validation:Minimum=1 */
  limit?: number
  /** Minburst specifies the size of the peakrate bucket. For perfect
accuracy, should be set to the MTU of the interface.  If a
peakrate is needed, but some burstiness is acceptable, this
size can be raised. A 3000 byte minburst allows around 3mbit/s
of peakrate, given 1000 byte packets.
+optional
+kubebuilder:validation:Minimum=0 */
  minburst?: number
  /** Peakrate is the maximum depletion rate of the bucket.
The peakrate does not need to be set, it is only necessary
if perfect millisecond timescale shaping is required.
+optional
+kubebuilder:validation:Minimum=0 */
  peakrate?: number
  /** Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second. */
  rate?: string
}

export interface V1alpha1BlockChaosSpec {
  /** Action defines the specific block chaos action.
Supported action: delay
+kubebuilder:validation:Enum=delay */
  action?: string
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  delay?: V1alpha1BlockDelaySpec
  /** Duration represents the duration of the chaos action.
+optional */
  duration?: string
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
  volumeName?: string
}

export interface V1alpha1BlockDelaySpec {
  /** +optional */
  correlation?: string
  /** +optional */
  jitter?: string
  /** Latency defines the latency of every io request. */
  latency?: string
}

export interface V1alpha1CPUStressor {
  /** Load specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100
is full loading.
+kubebuilder:validation:Minimum=0
+kubebuilder:validation:Maximum=100
+optional */
  load?: number
  /** extend stress-ng options
+optional */
  options?: string[]
  /** Workers specifies N workers to apply the stressor.
Maximum 8192 workers can run by stress-ng
+kubebuilder:validation:Maximum=8192 */
  workers?: number
}

export interface V1alpha1ChaosOnlyScheduleSpec {
  awsChaos?: V1alpha1AWSChaosSpec
  azureChaos?: V1alpha1AzureChaosSpec
  blockChaos?: V1alpha1BlockChaosSpec
  /** +optional
+kubebuilder:validation:Enum=Forbid;Allow */
  concurrencyPolicy?: string
  dnsChaos?: V1alpha1DNSChaosSpec
  gcpChaos?: V1alpha1GCPChaosSpec
  /** +optional
+kubebuilder:validation:Minimum=1 */
  historyLimit?: number
  httpChaos?: V1alpha1HTTPChaosSpec
  ioChaos?: V1alpha1IOChaosSpec
  jvmChaos?: V1alpha1JVMChaosSpec
  kernelChaos?: V1alpha1KernelChaosSpec
  networkChaos?: V1alpha1NetworkChaosSpec
  physicalmachineChaos?: V1alpha1PhysicalMachineChaosSpec
  podChaos?: V1alpha1PodChaosSpec
  schedule?: string
  /** +optional
+nullable
+kubebuilder:validation:Minimum=0 */
  startingDeadlineSeconds?: number
  stressChaos?: V1alpha1StressChaosSpec
  timeChaos?: V1alpha1TimeChaosSpec
  type?: string
}

export interface V1alpha1ClockSpec {
  /** the identifier of the particular clock on which to act.
More clock description in linux kernel can be found in man page of clock_getres, clock_gettime, clock_settime.
Muti clock ids should be split with "," */
  'clock-ids-slice'?: string
  /** the pid of target program. */
  pid?: number
  /** specifies the length of time offset. */
  'time-offset'?: string
}

export interface V1alpha1ConditionalBranch {
  /** Expression is the expression for this conditional branch, expected type of result is boolean. If expression is empty, this branch will always be selected/the template will be spawned.
+optional */
  expression?: string
  /** Target is the name of other template, if expression is evaluated as true, this template will be spawned. */
  target?: string
}

export interface V1alpha1CorruptSpec {
  /** +optional */
  correlation?: string
  corrupt?: string
}

export interface V1alpha1DNSChaosSpec {
  /** Action defines the specific DNS chaos action.
Supported action: error, random
Default action: error
+kubebuilder:validation:Enum=error;random */
  action?: string
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  /** Duration represents the duration of the chaos action */
  duration?: string
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** Choose which domain names to take effect, support the placeholder ? and wildcard *, or the Specified domain name.
Note:
     1. The wildcard * must be at the end of the string. For example, chaos-*.org is invalid.
     2. if the patterns is empty, will take effect on all the domain names.
For example:
		The value is ["google.com", "github.*", "chaos-mes?.org"],
		will take effect on "google.com", "github.com" and "chaos-mesh.org"
+optional */
  patterns?: string[]
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1DelaySpec {
  /** +optional */
  correlation?: string
  /** +kubebuilder:validation:Pattern="^[0-9]+(\\.[0-9]+)?(ns|us|ms|s|m|h)$"
+optional */
  jitter?: string
  /** +kubebuilder:validation:Pattern="^[0-9]+(\\.[0-9]+)?(ns|us|ms|s|m|h)$" */
  latency?: string
  reorder?: V1alpha1ReorderSpec
}

export interface V1alpha1DiskFillSpec {
  /** fill disk by fallocate */
  'fill-by-fallocate'?: boolean
  /** specifies the location to fill data in. if path not provided,
payload will read/write from/into a temp file, temp file will be deleted after writing */
  path?: string
  /** specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000,
K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB */
  size?: string
}

export interface V1alpha1DiskPayloadSpec {
  /** specifies the location to fill data in. if path not provided,
payload will read/write from/into a temp file, temp file will be deleted after writing */
  path?: string
  /** specifies the number of process work on writing, default 1, only 1-255 is valid value */
  'payload-process-num'?: number
  /** specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000,
K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB */
  size?: string
}

export interface V1alpha1DuplicateSpec {
  /** +optional */
  correlation?: string
  duplicate?: string
}

export interface V1alpha1FailKernRequest {
  /** Callchain indicate a special call chain, such as:
    ext4_mount
      -> mount_subtree
         -> ...
            -> should_failslab
With an optional set of predicates and an optional set of
parameters, which used with predicates. You can read call chan
and predicate examples from https://github.com/chaos-mesh/bpfki/tree/develop/examples
to learn more.
If no special call chain, just keep Callchain empty, which means it will fail at any call chain
with slab alloc (eg: kmalloc). */
  callchain?: V1alpha1Frame[]
  /** FailType indicates what to fail, can be set to '0' / '1' / '2'
If `0`, indicates slab to fail (should_failslab)
If `1`, indicates alloc_page to fail (should_fail_alloc_page)
If `2`, indicates bio to fail (should_fail_bio)
You can read:
  1. https://www.kernel.org/doc/html/latest/fault-injection/fault-injection.html
  2. http://github.com/iovisor/bcc/blob/master/tools/inject_example.txt
to learn more
+kubebuilder:validation:Maximum=2
+kubebuilder:validation:Minimum=0 */
  failtype?: number
  /** Headers indicates the appropriate kernel headers you need.
Eg: "linux/mmzone.h", "linux/blkdev.h" and so on */
  headers?: string[]
  /** Probability indicates the fails with probability.
If you want 1%, please set this field with 1.
+kubebuilder:validation:Minimum=0
+kubebuilder:validation:Maximum=100 */
  probability?: number
  /** Times indicates the max times of fails.
+kubebuilder:validation:Minimum=0 */
  times?: number
}

export interface V1alpha1FileAppendSpec {
  /** Count is the number of times to append the data. */
  count?: number
  /** Data is the data for append. */
  data?: string
  /** FileName is the name of the file to be created, modified, deleted, renamed, or appended. */
  'file-name'?: string
}

export interface V1alpha1FileCreateSpec {
  /** DirName is the directory name to create or delete. */
  'dir-name'?: string
  /** FileName is the name of the file to be created, modified, deleted, renamed, or appended. */
  'file-name'?: string
}

export interface V1alpha1FileDeleteSpec {
  /** DirName is the directory name to create or delete. */
  'dir-name'?: string
  /** FileName is the name of the file to be created, modified, deleted, renamed, or appended. */
  'file-name'?: string
}

export interface V1alpha1FileModifyPrivilegeSpec {
  /** FileName is the name of the file to be created, modified, deleted, renamed, or appended. */
  'file-name'?: string
  /** Privilege is the file privilege to be set. */
  privilege?: number
}

export interface V1alpha1FileRenameSpec {
  /** DestFile is the name to be renamed. */
  'dest-file'?: string
  /** SourceFile is the name need to be renamed. */
  'source-file'?: string
}

export interface V1alpha1FileReplaceSpec {
  /** DestStr is the destination string of the file. */
  'dest-string'?: string
  /** FileName is the name of the file to be created, modified, deleted, renamed, or appended. */
  'file-name'?: string
  /** Line is the line number of the file to be replaced. */
  line?: number
  /** OriginStr is the origin string of the file. */
  'origin-string'?: string
}

export interface V1alpha1Frame {
  /** Funcname can be find from kernel source or `/proc/kallsyms`, such as `ext4_mount` */
  funcname?: string
  /** Parameters is used with predicate, for example, if you want to inject slab error
in `d_alloc_parallel(struct dentry *parent, const struct qstr *name)` with a special
name `bananas`, you need to set it to `struct dentry *parent, const struct qstr *name`
otherwise omit it. */
  parameters?: string
  /** Predicate will access the arguments of this Frame, example with Parameters's, you can
set it to `STRNCMP(name->name, "bananas", 8)` to make inject only with it, or omit it
to inject for all d_alloc_parallel call chain. */
  predicate?: string
}

export interface V1alpha1GCPChaosSpec {
  /** Action defines the specific gcp chaos action.
Supported action: node-stop / node-reset / disk-loss
Default action: node-stop
+kubebuilder:validation:Enum=node-stop;node-reset;disk-loss */
  action?: string
  /** The device name of disks to detach.
Needed in disk-loss.
+ui:form:when=action=='disk-loss'
+optional */
  deviceNames?: string[]
  /** Duration represents the duration of the chaos action.
+optional */
  duration?: string
  /** Instance defines the name of the instance */
  instance?: string
  /** Project defines the ID of gcp project. */
  project?: string
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  /** SecretName defines the name of kubernetes secret. It is used for GCP credentials.
+optional */
  secretName?: string
  /** Zone defines the zone of gcp project. */
  zone?: string
}

export interface V1alpha1HTTPAbortSpec {
  /** Code is a rule to select target by http status code in response */
  code?: string
  /** HTTP method */
  method?: string
  /** Match path of Uri with wildcard matches */
  path?: string
  /** The TCP port that the target service listens on */
  port?: number
  /** Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports */
  proxy_ports?: number[]
  /** HTTP target: Request or Response */
  target?: string
}

/**
 * RequestHeaders is a rule to select target by http headers in request.
The key-value pairs represent header name and header value pairs.
+optional
 */
export type V1alpha1HTTPChaosSpecRequestHeaders = { [key: string]: string }

/**
 * ResponseHeaders is a rule to select target by http headers in response.
The key-value pairs represent header name and header value pairs.
+optional
 */
export type V1alpha1HTTPChaosSpecResponseHeaders = { [key: string]: string }

export interface V1alpha1HTTPChaosSpec {
  /** Abort is a rule to abort a http session.
+optional */
  abort?: boolean
  /** Code is a rule to select target by http status code in response.
+optional */
  code?: number
  /** Delay represents the delay of the target request/response.
A duration string is a possibly unsigned sequence of
decimal numbers, each with optional fraction and a unit suffix,
such as "300ms", "2h45m".
Valid time units are "ns", "us" (or "¬µs"), "ms", "s", "m", "h".
+optional */
  delay?: string
  /** Duration represents the duration of the chaos action.
+optional */
  duration?: string
  /** Method is a rule to select target by http method in request.
+optional */
  method?: string
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** Patch is a rule to patch some contents in target.
+optional */
  patch?: V1alpha1PodHttpChaosPatchActions
  /** Path is a rule to select target by uri path in http request.
+optional */
  path?: string
  /** Port represents the target port to be proxy of. */
  port?: number
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  /** Replace is a rule to replace some contents in target.
+optional */
  replace?: V1alpha1PodHttpChaosReplaceActions
  /** RequestHeaders is a rule to select target by http headers in request.
The key-value pairs represent header name and header value pairs.
+optional */
  request_headers?: V1alpha1HTTPChaosSpecRequestHeaders
  /** ResponseHeaders is a rule to select target by http headers in response.
The key-value pairs represent header name and header value pairs.
+optional */
  response_headers?: V1alpha1HTTPChaosSpecResponseHeaders
  selector?: V1alpha1PodSelectorSpec
  /** Target is the object to be selected and injected.
+kubebuilder:validation:Enum=Request;Response */
  target?: string
  tls?: V1alpha1PodHttpChaosTLS
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1HTTPConfigSpec {
  /** The config file path */
  file_path?: string
}

export interface V1alpha1HTTPCriteria {
  /** StatusCode defines the expected http status code for the request.
A statusCode string could be a single code (e.g. 200), or
an inclusive range (e.g. 200-400, both `200` and `400` are included). */
  statusCode?: string
}

export interface V1alpha1HTTPDelaySpec {
  /** Code is a rule to select target by http status code in response */
  code?: string
  /** Delay represents the delay of the target request/response */
  delay?: string
  /** HTTP method */
  method?: string
  /** Match path of Uri with wildcard matches */
  path?: string
  /** The TCP port that the target service listens on */
  port?: number
  /** Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports */
  proxy_ports?: number[]
  /** HTTP target: Request or Response */
  target?: string
}

export interface V1alpha1HTTPRequestSpec {
  /** The number of requests to send */
  count?: number
  /** Enable connection pool */
  'enable-conn-pool'?: boolean
  /** Request to send" */
  url?: string
}

export interface V1alpha1HTTPStatusCheck {
  /** +optional */
  body?: string
  criteria?: V1alpha1HTTPCriteria
  headers?: HttpHeader
  /** +optional
+kubebuilder:validation:Enum=GET;POST
+kubebuilder:default=GET */
  method?: string
  url?: string
}

export interface V1alpha1IOChaosSpec {
  /** Action defines the specific pod chaos action.
Supported action: latency / fault / attrOverride / mistake
+kubebuilder:validation:Enum=latency;fault;attrOverride;mistake */
  action?: string
  /** Attr defines the overrided attribution
+ui:form:when=action=='attrOverride'
+optional */
  attr?: V1alpha1AttrOverrideSpec
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  /** Delay defines the value of I/O chaos action delay.
A delay string is a possibly signed sequence of
decimal numbers, each with optional fraction and a unit suffix,
such as "300ms".
Valid time units are "ns", "us" (or "¬µs"), "ms", "s", "m", "h".
+ui:form:when=action=='latency'
+optional */
  delay?: string
  /** Duration represents the duration of the chaos action.
It is required when the action is `PodFailureAction`.
A duration string is a possibly signed sequence of
decimal numbers, each with optional fraction and a unit suffix,
such as "300ms", "-1.5h" or "2h45m".
Valid time units are "ns", "us" (or "¬µs"), "ms", "s", "m", "h".
+optional */
  duration?: string
  /** Errno defines the error code that returned by I/O action.
refer to: https://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html
+ui:form:when=action=='fault'
+optional */
  errno?: number
  /** Methods defines the I/O methods for injecting I/O chaos action.
default: all I/O methods.
+optional */
  methods?: string[]
  /** Mistake defines what types of incorrectness are injected to IO operations
+ui:form:when=action=='mistake'
+optional */
  mistake?: V1alpha1MistakeSpec
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** Path defines the path of files for injecting I/O chaos action.
+optional */
  path?: string
  /** Percent defines the percentage of injection errors and provides a number from 0-100.
default: 100.
+optional
+kubebuilder:default=100 */
  percent?: number
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
  /** VolumePath represents the mount path of injected volume */
  volumePath?: string
}

export interface V1alpha1JVMChaosSpec {
  /** Action defines the specific jvm chaos action.
Supported action: latency;return;exception;stress;gc;ruleData
+kubebuilder:validation:Enum=latency;return;exception;stress;gc;ruleData;mysql */
  action?: string
  /** Java class
+optional */
  class?: string
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  /** the CPU core number needs to use, only set it when action is stress
+optional */
  cpuCount?: number
  /** the match database
default value is "", means match all database */
  database?: string
  /** Duration represents the duration of the chaos action
+optional */
  duration?: string
  /** the exception which needs to throw for action `exception`
or the exception message needs to throw in action `mysql`
+optional */
  exception?: string
  /** the latency duration for action 'latency', unit ms
or the latency duration in action `mysql`
+optional */
  latency?: number
  /** the memory type needs to locate, only set it when action is stress, the value can be 'stack' or 'heap'
+optional */
  memType?: string
  /** the method in Java class
+optional */
  method?: string
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** the version of mysql-connector-java, only support 5.X.X(set to "5") and 8.X.X(set to "8") now */
  mysqlConnectorVersion?: string
  /** byteman rule name, should be unique, and will generate one if not set
+optional */
  name?: string
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  /** the return value for action 'return'
+optional */
  returnValue?: string
  /** the byteman rule's data for action 'ruleData'
+optional */
  ruleData?: string
  selector?: V1alpha1PodSelectorSpec
  /** the match sql type
default value is "", means match all SQL type.
The value can be 'select', 'insert', 'update', 'delete', 'replace'. */
  sqlType?: string
  /** the match table
default value is "", means match all table */
  table?: string
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1JVMExceptionSpec {
  /** Java class
+optional */
  class?: string
  /** the exception which needs to throw for action `exception` */
  exception?: string
  /** the method in Java class
+optional */
  method?: string
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
}

export interface V1alpha1JVMGCSpec {
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
}

export interface V1alpha1JVMLatencySpec {
  /** Java class
+optional */
  class?: string
  /** the latency duration for action 'latency', unit ms */
  latency?: number
  /** the method in Java class
+optional */
  method?: string
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
}

export interface V1alpha1JVMReturnSpec {
  /** Java class
+optional */
  class?: string
  /** the method in Java class
+optional */
  method?: string
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
  /** the return value for action 'return' */
  value?: string
}

export interface V1alpha1JVMRuleDataSpec {
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
  /** RuleData used to save the rule file's data, will use it when recover */
  'rule-data'?: string
}

export interface V1alpha1JVMStressSpec {
  /** the CPU core number need to use, only set it when action is stress */
  'cpu-count'?: number
  /** the memory type need to locate, only set it when action is stress, the value can be 'stack' or 'heap' */
  'mem-type'?: string
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
}

export interface V1alpha1KafkaFillSpec {
  /** The host of kafka server */
  host?: string
  /** The max bytes to fill */
  maxBytes?: number
  /** The size of each message */
  messageSize?: number
  /** The password of kafka client */
  password?: string
  /** The port of kafka server */
  port?: number
  /** The command to reload kafka config */
  reloadCommand?: string
  /** The topic to attack */
  topic?: string
  /** The username of kafka client */
  username?: string
}

export interface V1alpha1KafkaFloodSpec {
  /** The host of kafka server */
  host?: string
  /** The size of each message */
  messageSize?: number
  /** The password of kafka client */
  password?: string
  /** The port of kafka server */
  port?: number
  /** The number of worker threads */
  threads?: number
  /** The topic to attack */
  topic?: string
  /** The username of kafka client */
  username?: string
}

export interface V1alpha1KafkaIOSpec {
  /** The path of server config */
  configFile?: string
  /** Make kafka cluster non-readable */
  nonReadable?: boolean
  /** Make kafka cluster non-writable */
  nonWritable?: boolean
  /** The topic to attack */
  topic?: string
}

export interface V1alpha1KernelChaosSpec {
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  /** Duration represents the duration of the chaos action */
  duration?: string
  failKernRequest?: V1alpha1FailKernRequest
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1LossSpec {
  /** +optional */
  correlation?: string
  loss?: string
}

export interface V1alpha1MemoryStressor {
  /** OOMScoreAdj sets the oom_score_adj of the stress process. See `man 5 proc` to know more
about this option.
+kubebuilder:validation:Minimum=-1000
+kubebuilder:validation:Maximum=1000
+kubebuilder:default=0
+optional */
  oomScoreAdj?: number
  /** extend stress-ng options
+optional */
  options?: string[]
  /** Size specifies N bytes consumed per vm worker, default is the total available memory.
One can specify the size as % of total available memory or in units of B, KB/KiB,
MB/MiB, GB/GiB, TB/TiB.
+optional */
  size?: string
  /** Workers specifies N workers to apply the stressor.
Maximum 8192 workers can run by stress-ng
+kubebuilder:validation:Maximum=8192 */
  workers?: number
}

export interface V1alpha1MistakeSpec {
  /** Filling determines what is filled in the mistake data.
+optional
+kubebuilder:validation:Enum=zero;random */
  filling?: string
  /** Max length of each wrong data segment in bytes
+optional
+kubebuilder:validation:Minimum=1 */
  maxLength?: number
  /** There will be [1, MaxOccurrences] segments of wrong data.
+optional
+kubebuilder:validation:Minimum=1 */
  maxOccurrences?: number
}

export interface V1alpha1NetworkBandwidthSpec {
  /** +kubebuilder:validation:Minimum=1 */
  buffer?: number
  device?: string
  hostname?: string
  'ip-address'?: string
  /** +kubebuilder:validation:Minimum=1 */
  limit?: number
  minburst?: number
  peakrate?: number
  rate?: string
}

export interface V1alpha1NetworkChaosSpec {
  /** Action defines the specific network chaos action.
Supported action: partition, netem, delay, loss, duplicate, corrupt
Default action: delay
+kubebuilder:validation:Enum=netem;delay;loss;duplicate;corrupt;partition;bandwidth */
  action?: string
  /** Bandwidth represents the detail about bandwidth control action
+ui:form:when=action=='bandwidth'
+optional */
  bandwidth?: V1alpha1BandwidthSpec
  /** Corrupt represents the detail about corrupt action
+ui:form:when=action=='corrupt'
+optional */
  corrupt?: V1alpha1CorruptSpec
  /** Delay represents the detail about delay action
+ui:form:when=action=='delay'
+optional */
  delay?: V1alpha1DelaySpec
  /** Device represents the network device to be affected.
+optional */
  device?: string
  /** Direction represents the direction, this applies on netem and network partition action
+optional
+kubebuilder:validation:Enum=to;from;both
+kubebuilder:default=to */
  direction?: string
  /** DuplicateSpec represents the detail about loss action
+ui:form:when=action=='duplicate'
+optional */
  duplicate?: V1alpha1DuplicateSpec
  /** Duration represents the duration of the chaos action */
  duration?: string
  /** ExternalTargets represents network targets outside k8s
+optional */
  externalTargets?: string[]
  /** Loss represents the detail about loss action
+ui:form:when=action=='loss'
+optional */
  loss?: V1alpha1LossSpec
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** Rate represents the detail about rate control action
+ui:form:ignore
+optional */
  rate?: V1alpha1RateSpec
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  target?: V1alpha1PodSelector
  /** TargetDevice represents the network device to be affected in target scope.
+optional */
  targetDevice?: string
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1NetworkCorruptSpec {
  /** correlation is percentage (10 is 10%) */
  correlation?: string
  /** the network interface to impact */
  device?: string
  /** only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'egress-port'?: string
  /** only impact traffic to these hostnames */
  hostname?: string
  /** only impact egress traffic to these IP addresses */
  'ip-address'?: string
  /** only impact traffic using this IP protocol, supported: tcp, udp, icmp, all */
  'ip-protocol'?: string
  /** percentage of packets to corrupt (10 is 10%) */
  percent?: string
  /** only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'source-port'?: string
}

export interface V1alpha1NetworkDNSSpec {
  /** map this host to specified IP */
  'dns-domain-name'?: string
  /** map specified host to this IP address */
  'dns-ip'?: string
  /** update the DNS server in /etc/resolv.conf with this value */
  'dns-server'?: string
}

export interface V1alpha1NetworkDelaySpec {
  /** only the packet which match the tcp flag can be accepted, others will be dropped.
only set when the IPProtocol is tcp, used for partition. */
  'accept-tcp-flags'?: string
  /** correlation is percentage (10 is 10%) */
  correlation?: string
  /** the network interface to impact */
  device?: string
  /** only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'egress-port'?: string
  /** only impact traffic to these hostnames */
  hostname?: string
  /** only impact egress traffic to these IP addresses */
  'ip-address'?: string
  /** only impact traffic using this IP protocol, supported: tcp, udp, icmp, all */
  'ip-protocol'?: string
  /** jitter time, time units: ns, us (or ¬µs), ms, s, m, h. */
  jitter?: string
  /** delay egress time, time units: ns, us (or ¬µs), ms, s, m, h. */
  latency?: string
  /** only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'source-port'?: string
}

export interface V1alpha1NetworkDownSpec {
  /** The network interface to impact */
  device?: string
  /** NIC down time, time units: ns, us (or ¬µs), ms, s, m, h. */
  duration?: string
}

export interface V1alpha1NetworkDuplicateSpec {
  /** correlation is percentage (10 is 10%) */
  correlation?: string
  /** the network interface to impact */
  device?: string
  /** only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'egress-port'?: string
  /** only impact traffic to these hostnames */
  hostname?: string
  /** only impact egress traffic to these IP addresses */
  'ip-address'?: string
  /** only impact traffic using this IP protocol, supported: tcp, udp, icmp, all */
  'ip-protocol'?: string
  /** percentage of packets to duplicate (10 is 10%) */
  percent?: string
  /** only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'source-port'?: string
}

export interface V1alpha1NetworkFloodSpec {
  /** The number of seconds to run the iperf test */
  duration?: string
  /** Generate traffic to this IP address */
  'ip-address'?: string
  /** The number of iperf parallel client threads to run */
  parallel?: number
  /** Generate traffic to this port on the IP address */
  port?: string
  /** The speed of network traffic, allows bps, kbps, mbps, gbps, tbps unit. bps means bytes per second */
  rate?: string
}

export interface V1alpha1NetworkLossSpec {
  /** correlation is percentage (10 is 10%) */
  correlation?: string
  /** the network interface to impact */
  device?: string
  /** only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'egress-port'?: string
  /** only impact traffic to these hostnames */
  hostname?: string
  /** only impact egress traffic to these IP addresses */
  'ip-address'?: string
  /** only impact traffic using this IP protocol, supported: tcp, udp, icmp, all */
  'ip-protocol'?: string
  /** percentage of packets to loss (10 is 10%) */
  percent?: string
  /** only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.
it can only be used in conjunction with -p tcp or -p udp */
  'source-port'?: string
}

export interface V1alpha1NetworkPartitionSpec {
  /** only the packet which match the tcp flag can be accepted, others will be dropped.
only set when the IPProtocol is tcp, used for partition. */
  'accept-tcp-flags'?: string
  /** the network interface to impact */
  device?: string
  /** specifies the partition direction, values can be 'from', 'to'.
'from' means packets coming from the 'IPAddress' or 'Hostname' and going to your server,
'to' means packets originating from your server and going to the 'IPAddress' or 'Hostname'. */
  direction?: string
  /** only impact traffic to these hostnames */
  hostname?: string
  /** only impact egress traffic to these IP addresses */
  'ip-address'?: string
  /** only impact egress traffic to these IP addresses */
  'ip-protocol'?: string
}

export interface V1alpha1PMJVMMySQLSpec {
  /** the match database
default value is "", means match all database */
  database?: string
  /** The exception which needs to throw for action `exception`
or the exception message needs to throw in action `mysql` */
  exception?: string
  /** The latency duration for action 'latency'
or the latency duration in action `mysql` */
  latency?: number
  /** the version of mysql-connector-java, only support 5.X.X(set to "5") and 8.X.X(set to "8") now */
  mysqlConnectorVersion?: string
  /** the pid of Java process which needs to attach */
  pid?: number
  /** the port of agent server, default 9277
+optional */
  port?: number
  /** the match sql type
default value is "", means match all SQL type.
The value can be 'select', 'insert', 'update', 'delete', 'replace'. */
  sqlType?: string
  /** the match table
default value is "", means match all table */
  table?: string
}

export interface V1alpha1PhysicalMachineChaosSpec {
  /** +kubebuilder:validation:Enum=stress-cpu;stress-mem;disk-read-payload;disk-write-payload;disk-fill;network-corrupt;network-duplicate;network-loss;network-delay;network-partition;network-dns;network-bandwidth;network-flood;network-down;process;jvm-exception;jvm-gc;jvm-latency;jvm-return;jvm-stress;jvm-rule-data;jvm-mysql;clock;redis-expiration;redis-penetration;redis-cacheLimit;redis-restart;redis-stop;kafka-fill;kafka-flood;kafka-io;file-create;file-modify;file-delete;file-rename;file-append;file-replace;vm;user_defined */
  action?: string
  /** DEPRECATED: Use Selector instead.
Only one of Address and Selector could be specified.
+optional */
  address?: string[]
  /** +ui:form:when=action=='clock'
+optional */
  clock?: V1alpha1ClockSpec
  /** +ui:form:when=action=='disk-fill'
+optional */
  'disk-fill'?: V1alpha1DiskFillSpec
  /** +ui:form:when=action=='disk-read-payload'
+optional */
  'disk-read-payload'?: V1alpha1DiskPayloadSpec
  /** +ui:form:when=action=='disk-write-payload'
+optional */
  'disk-write-payload'?: V1alpha1DiskPayloadSpec
  /** Duration represents the duration of the chaos action
+optional */
  duration?: string
  /** +ui:form:when=action=='file-append'
+optional */
  'file-append'?: V1alpha1FileAppendSpec
  /** +ui:form:when=action=='file-create'
+optional */
  'file-create'?: V1alpha1FileCreateSpec
  /** +ui:form:when=action=='file-delete'
+optional */
  'file-delete'?: V1alpha1FileDeleteSpec
  /** +ui:form:when=action=='file-modify'
+optional */
  'file-modify'?: V1alpha1FileModifyPrivilegeSpec
  /** +ui:form:when=action=='file-create'
+optional */
  'file-rename'?: V1alpha1FileRenameSpec
  /** +ui:form:when=action=='file-replace'
+optional */
  'file-replace'?: V1alpha1FileReplaceSpec
  /** +ui:form:when=action=='http-abort'
+optional */
  'http-abort'?: V1alpha1HTTPAbortSpec
  /** +ui:form:when=action=='http-config'
+optional */
  'http-config'?: V1alpha1HTTPConfigSpec
  /** +ui:form:when=action=='http-delay'
+optional */
  'http-delay'?: V1alpha1HTTPDelaySpec
  /** +ui:form:when=action=='http-request'
+optional */
  'http-request'?: V1alpha1HTTPRequestSpec
  /** +ui:form:when=action=='jvm-exception'
+optional */
  'jvm-exception'?: V1alpha1JVMExceptionSpec
  /** +ui:form:when=action=='jvm-gc'
+optional */
  'jvm-gc'?: V1alpha1JVMGCSpec
  /** +ui:form:when=action=='jvm-latency'
+optional */
  'jvm-latency'?: V1alpha1JVMLatencySpec
  /** +ui:form:when=action=='jvm-mysql'
+optional */
  'jvm-mysql'?: V1alpha1PMJVMMySQLSpec
  /** +ui:form:when=action=='jvm-return'
+optional */
  'jvm-return'?: V1alpha1JVMReturnSpec
  /** +ui:form:when=action=='jvm-rule-data'
+optional */
  'jvm-rule-data'?: V1alpha1JVMRuleDataSpec
  /** +ui:form:when=action=='jvm-stress'
+optional */
  'jvm-stress'?: V1alpha1JVMStressSpec
  /** +ui:form:when=action=='kafka-fill'
+optional */
  'kafka-fill'?: V1alpha1KafkaFillSpec
  /** +ui:form:when=action=='kafka-flood'
+optional */
  'kafka-flood'?: V1alpha1KafkaFloodSpec
  /** +ui:form:when=action=='kafka-io'
+optional */
  'kafka-io'?: V1alpha1KafkaIOSpec
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** +ui:form:when=action=='network-bandwidth'
+optional */
  'network-bandwidth'?: V1alpha1NetworkBandwidthSpec
  /** +ui:form:when=action=='network-corrupt'
+optional */
  'network-corrupt'?: V1alpha1NetworkCorruptSpec
  /** +ui:form:when=action=='network-delay'
+optional */
  'network-delay'?: V1alpha1NetworkDelaySpec
  /** +ui:form:when=action=='network-dns'
+optional */
  'network-dns'?: V1alpha1NetworkDNSSpec
  /** +ui:form:when=action=='network-down'
+optional */
  'network-down'?: V1alpha1NetworkDownSpec
  /** +ui:form:when=action=='network-duplicate'
+optional */
  'network-duplicate'?: V1alpha1NetworkDuplicateSpec
  /** +ui:form:when=action=='network-flood'
+optional */
  'network-flood'?: V1alpha1NetworkFloodSpec
  /** +ui:form:when=action=='network-loss'
+optional */
  'network-loss'?: V1alpha1NetworkLossSpec
  /** +ui:form:when=action=='network-partition'
+optional */
  'network-partition'?: V1alpha1NetworkPartitionSpec
  /** +ui:form:when=action=='process'
+optional */
  process?: V1alpha1ProcessSpec
  /** +ui:form:when=action=='redis-cacheLimit'
+optional */
  'redis-cacheLimit'?: V1alpha1RedisCacheLimitSpec
  /** +ui:form:when=action=='redis-expiration'
+optional */
  'redis-expiration'?: V1alpha1RedisExpirationSpec
  /** +ui:form:when=action=='redis-penetration'
+optional */
  'redis-penetration'?: V1alpha1RedisPenetrationSpec
  /** +ui:form:when=action=='redis-restart'
+optional */
  'redis-restart'?: V1alpha1RedisSentinelRestartSpec
  /** +ui:form:when=action=='redis-stop'
+optional */
  'redis-stop'?: V1alpha1RedisSentinelStopSpec
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PhysicalMachineSelectorSpec
  /** +ui:form:when=action=='stress-cpu'
+optional */
  'stress-cpu'?: V1alpha1StressCPUSpec
  /** +ui:form:when=action=='stress-mem'
+optional */
  'stress-mem'?: V1alpha1StressMemorySpec
  /** +ui:form:when=action=='user_defined'
+optional */
  user_defined?: V1alpha1UserDefinedSpec
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of physical machines to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of physical machines the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
  /** +ui:form:when=action=='vm'
+optional */
  vm?: V1alpha1VMSpec
}

/**
 * Map of string keys and values that can be used to select objects.
A selector based on annotations.
+optional
 */
export type V1alpha1PhysicalMachineSelectorSpecAnnotationSelectors = { [key: string]: string }

/**
 * Map of string keys and values that can be used to select objects.
A selector based on fields.
+optional
 */
export type V1alpha1PhysicalMachineSelectorSpecFieldSelectors = { [key: string]: string }

/**
 * Map of string keys and values that can be used to select objects.
A selector based on labels.
+optional
 */
export type V1alpha1PhysicalMachineSelectorSpecLabelSelectors = { [key: string]: string }

/**
 * PhysicalMachines is a map of string keys and a set values that used to select physical machines.
The key defines the namespace which physical machine belong,
and each value is a set of physical machine names.
+optional
 */
export type V1alpha1PhysicalMachineSelectorSpecPhysicalMachines = { [key: string]: string[] }

export interface V1alpha1PhysicalMachineSelectorSpec {
  /** Map of string keys and values that can be used to select objects.
A selector based on annotations.
+optional */
  annotationSelectors?: V1alpha1PhysicalMachineSelectorSpecAnnotationSelectors
  /** a slice of label selector expressions that can be used to select objects.
A list of selectors based on set-based label expressions.
+ui:form:ignore
+optional */
  expressionSelectors?: V1LabelSelectorRequirement[]
  /** Map of string keys and values that can be used to select objects.
A selector based on fields.
+optional */
  fieldSelectors?: V1alpha1PhysicalMachineSelectorSpecFieldSelectors
  /** Map of string keys and values that can be used to select objects.
A selector based on labels.
+optional */
  labelSelectors?: V1alpha1PhysicalMachineSelectorSpecLabelSelectors
  /** Namespaces is a set of namespace to which objects belong.
+optional */
  namespaces?: string[]
  /** PhysicalMachines is a map of string keys and a set values that used to select physical machines.
The key defines the namespace which physical machine belong,
and each value is a set of physical machine names.
+optional */
  physicalMachines?: V1alpha1PhysicalMachineSelectorSpecPhysicalMachines
}

export interface V1alpha1PodChaosSpec {
  /** Action defines the specific pod chaos action.
Supported action: pod-kill / pod-failure / container-kill
Default action: pod-kill
+kubebuilder:validation:Enum=pod-kill;pod-failure;container-kill */
  action?: string
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  /** Duration represents the duration of the chaos action.
It is required when the action is `PodFailureAction`.
A duration string is a possibly signed sequence of
decimal numbers, each with optional fraction and a unit suffix,
such as "300ms", "-1.5h" or "2h45m".
Valid time units are "ns", "us" (or "¬µs"), "ms", "s", "m", "h".
+optional */
  duration?: string
  /** GracePeriod is used in pod-kill action. It represents the duration in seconds before the pod should be deleted.
Value must be non-negative integer. The default value is zero that indicates delete immediately.
+optional
+kubebuilder:validation:Minimum=0 */
  gracePeriod?: number
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1PodHttpChaosPatchActions {
  /** Body is a rule to patch message body of target.
+optional */
  body?: V1alpha1PodHttpChaosPatchBodyAction
  /** Headers is a rule to append http headers of target.
For example: `[["Set-Cookie", "<one cookie>"], ["Set-Cookie", "<another cookie>"]]`.
+optional */
  headers?: string[][]
  /** Queries is a rule to append uri queries of target(Request only).
For example: `[["foo", "bar"], ["foo", "unknown"]]`.
+optional */
  queries?: string[][]
}

export interface V1alpha1PodHttpChaosPatchBodyAction {
  /** Type represents the patch type, only support `JSON` as [merge patch json](https://tools.ietf.org/html/rfc7396) currently. */
  type?: string
  /** Value is the patch contents. */
  value?: string
}

/**
 * Headers is a rule to replace http headers of target.
The key-value pairs represent header name and header value pairs.
+optional
 */
export type V1alpha1PodHttpChaosReplaceActionsHeaders = { [key: string]: string }

/**
 * Queries is a rule to replace uri queries in http request.
For example, with value `{ "foo": "unknown" }`, the `/?foo=bar` will be altered to `/?foo=unknown`,
+optional
 */
export type V1alpha1PodHttpChaosReplaceActionsQueries = { [key: string]: string }

export interface V1alpha1PodHttpChaosReplaceActions {
  /** Body is a rule to replace http message body in target.
+optional */
  body?: number[]
  /** Code is a rule to replace http status code in response.
+optional */
  code?: number
  /** Headers is a rule to replace http headers of target.
The key-value pairs represent header name and header value pairs.
+optional */
  headers?: V1alpha1PodHttpChaosReplaceActionsHeaders
  /** Method is a rule to replace http method in request.
+optional */
  method?: string
  /** Path is rule to to replace uri path in http request.
+optional */
  path?: string
  /** Queries is a rule to replace uri queries in http request.
For example, with value `{ "foo": "unknown" }`, the `/?foo=bar` will be altered to `/?foo=unknown`,
+optional */
  queries?: V1alpha1PodHttpChaosReplaceActionsQueries
}

export interface V1alpha1PodHttpChaosTLS {
  /** CAName represents the data name of ca file in secret, `ca.crt` for example
+optional */
  caName?: string
  /** CertName represents the data name of cert file in secret, `tls.crt` for example */
  certName?: string
  /** KeyName represents the data name of key file in secret, `tls.key` for example */
  keyName?: string
  /** SecretName represents the name of required secret resource */
  secretName?: string
  /** SecretNamespace represents the namespace of required secret resource */
  secretNamespace?: string
}

export interface V1alpha1PodSelector {
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  selector?: V1alpha1PodSelectorSpec
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

/**
 * Map of string keys and values that can be used to select objects.
A selector based on annotations.
+optional
 */
export type V1alpha1PodSelectorSpecAnnotationSelectors = { [key: string]: string }

/**
 * Map of string keys and values that can be used to select objects.
A selector based on fields.
+optional
 */
export type V1alpha1PodSelectorSpecFieldSelectors = { [key: string]: string }

/**
 * Map of string keys and values that can be used to select objects.
A selector based on labels.
+optional
 */
export type V1alpha1PodSelectorSpecLabelSelectors = { [key: string]: string }

/**
 * Map of string keys and values that can be used to select nodes.
Selector which must match a node's labels,
and objects must belong to these selected nodes.
+optional
 */
export type V1alpha1PodSelectorSpecNodeSelectors = { [key: string]: string }

/**
 * Pods is a map of string keys and a set values that used to select pods.
The key defines the namespace which pods belong,
and the each values is a set of pod names.
+optional
 */
export type V1alpha1PodSelectorSpecPods = { [key: string]: string[] }

export interface V1alpha1PodSelectorSpec {
  /** Map of string keys and values that can be used to select objects.
A selector based on annotations.
+optional */
  annotationSelectors?: V1alpha1PodSelectorSpecAnnotationSelectors
  /** a slice of label selector expressions that can be used to select objects.
A list of selectors based on set-based label expressions.
+ui:form:ignore
+optional */
  expressionSelectors?: V1LabelSelectorRequirement[]
  /** Map of string keys and values that can be used to select objects.
A selector based on fields.
+optional */
  fieldSelectors?: V1alpha1PodSelectorSpecFieldSelectors
  /** Map of string keys and values that can be used to select objects.
A selector based on labels.
+optional */
  labelSelectors?: V1alpha1PodSelectorSpecLabelSelectors
  /** Namespaces is a set of namespace to which objects belong.
+optional */
  namespaces?: string[]
  /** Map of string keys and values that can be used to select nodes.
Selector which must match a node's labels,
and objects must belong to these selected nodes.
+optional */
  nodeSelectors?: V1alpha1PodSelectorSpecNodeSelectors
  /** Nodes is a set of node name and objects must belong to these nodes.
+optional */
  nodes?: string[]
  /** PodPhaseSelectors is a set of condition of a pod at the current time.
supported value: Pending / Running / Succeeded / Failed / Unknown
+optional */
  podPhaseSelectors?: string[]
  /** Pods is a map of string keys and a set values that used to select pods.
The key defines the namespace which pods belong,
and the each values is a set of pod names.
+optional */
  pods?: V1alpha1PodSelectorSpecPods
}

export interface V1alpha1ProcessSpec {
  /** the process name or the process ID */
  process?: string
  /** the command to be run when recovering experiment */
  recoverCmd?: string
  /** the signal number to send */
  signal?: number
}

export interface V1alpha1RateSpec {
  /** Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second. */
  rate?: string
}

export interface V1alpha1RedisCacheLimitSpec {
  /** The adress of Redis server */
  addr?: string
  /** The size of `maxmemory` */
  cacheSize?: string
  /** The password of Redis server */
  password?: string
  /** Specifies maxmemory as a percentage of the original value */
  percent?: string
}

export interface V1alpha1RedisExpirationSpec {
  /** The adress of Redis server */
  addr?: string
  /** The expiration of the keys */
  expiration?: string
  /** The keys to be expired */
  key?: string
  /** Additional options for `expiration` */
  option?: string
  /** The password of Redis server */
  password?: string
}

export interface V1alpha1RedisPenetrationSpec {
  /** The adress of Redis server */
  addr?: string
  /** The password of Redis server */
  password?: string
  /** The number of requests to be sent */
  requestNum?: number
}

export interface V1alpha1RedisSentinelRestartSpec {
  /** The adress of Redis server */
  addr?: string
  /** The path of Sentinel conf */
  conf?: string
  /** The control flag determines whether to flush config */
  flushConfig?: boolean
  /** The password of Redis server */
  password?: string
  /** The path of `redis-server` command-line tool */
  redisPath?: boolean
}

export interface V1alpha1RedisSentinelStopSpec {
  /** The adress of Redis server */
  addr?: string
  /** The path of Sentinel conf */
  conf?: string
  /** The control flag determines whether to flush config */
  flushConfig?: boolean
  /** The password of Redis server */
  password?: string
  /** The path of `redis-server` command-line tool */
  redisPath?: boolean
}

export interface V1alpha1ReorderSpec {
  /** +optional */
  correlation?: string
  gap?: number
  reorder?: string
}

/**
 * Annotations is an unstructured key value map stored with a resource that may be
set by external tools to store and retrieve arbitrary metadata. They are not
queryable and should be preserved when modifying objects.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
+optional
 */
export type V1alpha1ScheduleAnnotations = { [key: string]: string }

/**
 * Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and services.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
+optional
 */
export type V1alpha1ScheduleLabels = { [key: string]: string }

export interface V1alpha1Schedule {
  /** Annotations is an unstructured key value map stored with a resource that may be
set by external tools to store and retrieve arbitrary metadata. They are not
queryable and should be preserved when modifying objects.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
+optional */
  annotations?: V1alpha1ScheduleAnnotations
  /** APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
+optional */
  apiVersion?: string
  /** CreationTimestamp is a timestamp representing the server time when this object was
created. It is not guaranteed to be set in happens-before order across separate operations.
Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system.
Read-only.
Null for lists.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
+optional */
  creationTimestamp?: string
  /** Number of seconds allowed for this object to gracefully terminate before
it will be removed from the system. Only set when deletionTimestamp is also set.
May only be shortened.
Read-only.
+optional */
  deletionGracePeriodSeconds?: number
  /** DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
field is set by the server when a graceful deletion is requested by the user, and is not
directly settable by a client. The resource is expected to be deleted (no longer visible
from resource lists, and not reachable by name) after the time in this field, once the
finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
Once the deletionTimestamp is set, this value may not be unset or be set further into the
future, although it may be shortened or the resource may be deleted prior to this time.
For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
remove the pod from the API. In the presence of network partitions, this object may still
exist after this timestamp, until an administrator or automated process can determine the
resource is fully terminated.
If not set, graceful deletion of the object has not been requested.

Populated by the system when a graceful deletion is requested.
Read-only.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
+optional */
  deletionTimestamp?: string
  /** Must be empty before the object is deleted from the registry. Each entry
is an identifier for the responsible component that will remove the entry
from the list. If the deletionTimestamp of the object is non-nil, entries
in this list can only be removed.
Finalizers may be processed and removed in any order.  Order is NOT enforced
because it introduces significant risk of stuck finalizers.
finalizers is a shared field, any actor with permission can reorder it.
If the finalizer list is processed in order, then this can lead to a situation
in which the component responsible for the first finalizer in the list is
waiting for a signal (field value, external system, or other) produced by a
component responsible for a finalizer later in the list, resulting in a deadlock.
Without enforced ordering finalizers are free to order amongst themselves and
are not vulnerable to ordering changes in the list.
+optional
+patchStrategy=merge */
  finalizers?: string[]
  /** GenerateName is an optional prefix, used by the server, to generate a unique
name ONLY IF the Name field has not been provided.
If this field is used, the name returned to the client will be different
than the name passed. This value will also be combined with a unique suffix.
The provided value has the same validation rules as the Name field,
and may be truncated by the length of the suffix required to make the value
unique on the server.

If this field is specified and the generated name exists, the server will return a 409.

Applied only if Name is not specified.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
+optional */
  generateName?: string
  /** A sequence number representing a specific generation of the desired state.
Populated by the system. Read-only.
+optional */
  generation?: number
  /** Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
+optional */
  kind?: string
  /** Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and services.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
+optional */
  labels?: V1alpha1ScheduleLabels
  /** ManagedFields maps workflow-id and version to the set of fields
that are managed by that workflow. This is mostly for internal
housekeeping, and users typically shouldn't need to set or
understand this field. A workflow can be the user's name, a
controller's name, or the name of a specific apply path like
"ci-cd". The set of fields is always in the version that the
workflow used when modifying the object.

+optional */
  managedFields?: V1ManagedFieldsEntry[]
  /** Name must be unique within a namespace. Is required when creating resources, although
some resources may allow a client to request the generation of an appropriate name
automatically. Name is primarily intended for creation idempotence and configuration
definition.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
+optional */
  name?: string
  /** Namespace defines the space within which each name must be unique. An empty namespace is
equivalent to the "default" namespace, but "default" is the canonical representation.
Not all objects are required to be scoped to a namespace - the value of this field for
those objects will be empty.

Must be a DNS_LABEL.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
+optional */
  namespace?: string
  /** List of objects depended by this object. If ALL objects in the list have
been deleted, this object will be garbage collected. If this object is managed by a controller,
then an entry in this list will point to this controller, with the controller field set to true.
There cannot be more than one managing controller.
+optional
+patchMergeKey=uid
+patchStrategy=merge */
  ownerReferences?: V1OwnerReference[]
  /** An opaque value that represents the internal version of this object that can
be used by clients to determine when objects have changed. May be used for optimistic
concurrency, change detection, and the watch operation on a resource or set of resources.
Clients must treat these values as opaque and passed unmodified back to the server.
They may only be valid for a particular resource or set of resources.

Populated by the system.
Read-only.
Value must be treated as opaque by clients and .
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
+optional */
  resourceVersion?: string
  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
+optional */
  selfLink?: string
  spec?: V1alpha1ScheduleSpec
  status?: V1alpha1ScheduleStatus
  /** UID is the unique in time and space value for this object. It is typically generated by
the server on successful creation of a resource and is not allowed to change on PUT
operations.

Populated by the system.
Read-only.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
+optional */
  uid?: string
}

export interface V1alpha1ScheduleSpec {
  awsChaos?: V1alpha1AWSChaosSpec
  azureChaos?: V1alpha1AzureChaosSpec
  blockChaos?: V1alpha1BlockChaosSpec
  /** +optional
+kubebuilder:default=Forbid
+kubebuilder:validation:Enum=Forbid;Allow */
  concurrencyPolicy?: string
  dnsChaos?: V1alpha1DNSChaosSpec
  gcpChaos?: V1alpha1GCPChaosSpec
  /** +optional
+kubebuilder:validation:Minimum=1 */
  historyLimit?: number
  httpChaos?: V1alpha1HTTPChaosSpec
  ioChaos?: V1alpha1IOChaosSpec
  jvmChaos?: V1alpha1JVMChaosSpec
  kernelChaos?: V1alpha1KernelChaosSpec
  networkChaos?: V1alpha1NetworkChaosSpec
  physicalmachineChaos?: V1alpha1PhysicalMachineChaosSpec
  podChaos?: V1alpha1PodChaosSpec
  schedule?: string
  /** +optional
+nullable
+kubebuilder:validation:Minimum=0
+kubebuilder:validation:ExclusiveMinimum=true */
  startingDeadlineSeconds?: number
  stressChaos?: V1alpha1StressChaosSpec
  timeChaos?: V1alpha1TimeChaosSpec
  type?: string
  workflow?: V1alpha1WorkflowSpec
}

export interface V1alpha1ScheduleStatus {
  /** +optional */
  active?: V1ObjectReference[]
  /** +optional
+nullable */
  time?: string
}

export interface V1alpha1StatusCheckSpec {
  /** Duration defines the duration of the whole status check if the
number of failed execution does not exceed the failure threshold.
Duration is available to both `Synchronous` and `Continuous` mode.
A duration string is a possibly signed sequence of
decimal numbers, each with optional fraction and a unit suffix,
such as "300ms", "-1.5h" or "2h45m".
Valid time units are "ns", "us" (or "¬µs"), "ms", "s", "m", "h".
+optional */
  duration?: string
  /** FailureThreshold defines the minimum consecutive failure
for the status check to be considered failed.
+optional
+kubebuilder:default=3
+kubebuilder:validation:Minimum=1 */
  failureThreshold?: number
  http?: V1alpha1HTTPStatusCheck
  /** IntervalSeconds defines how often (in seconds) to perform
an execution of status check.
+optional
+kubebuilder:default=10
+kubebuilder:validation:Minimum=1 */
  intervalSeconds?: number
  /** Mode defines the execution mode of the status check.
Support type: Synchronous / Continuous
+optional
+kubebuilder:validation:Enum=Synchronous;Continuous */
  mode?: string
  /** RecordsHistoryLimit defines the number of record to retain.
+optional
+kubebuilder:default=100
+kubebuilder:validation:Minimum=1
+kubebuilder:validation:Maximum=1000 */
  recordsHistoryLimit?: number
  /** SuccessThreshold defines the minimum consecutive successes
for the status check to be considered successful.
SuccessThreshold only works for `Synchronous` mode.
+optional
+kubebuilder:default=1
+kubebuilder:validation:Minimum=1 */
  successThreshold?: number
  /** TimeoutSeconds defines the number of seconds after which
an execution of status check times out.
+optional
+kubebuilder:default=1
+kubebuilder:validation:Minimum=1 */
  timeoutSeconds?: number
  /** Type defines the specific status check type.
Support type: HTTP
+kubebuilder:default=HTTP
+kubebuilder:validation:Enum=HTTP */
  type?: string
}

export interface V1alpha1StatusCheckTemplate {
  /** Duration defines the duration of the whole status check if the
number of failed execution does not exceed the failure threshold.
Duration is available to both `Synchronous` and `Continuous` mode.
A duration string is a possibly signed sequence of
decimal numbers, each with optional fraction and a unit suffix,
such as "300ms", "-1.5h" or "2h45m".
Valid time units are "ns", "us" (or "¬µs"), "ms", "s", "m", "h".
+optional */
  duration?: string
  /** FailureThreshold defines the minimum consecutive failure
for the status check to be considered failed.
+optional
+kubebuilder:default=3
+kubebuilder:validation:Minimum=1 */
  failureThreshold?: number
  http?: V1alpha1HTTPStatusCheck
  /** IntervalSeconds defines how often (in seconds) to perform
an execution of status check.
+optional
+kubebuilder:default=10
+kubebuilder:validation:Minimum=1 */
  intervalSeconds?: number
  /** Mode defines the execution mode of the status check.
Support type: Synchronous / Continuous
+optional
+kubebuilder:validation:Enum=Synchronous;Continuous */
  mode?: string
  /** RecordsHistoryLimit defines the number of record to retain.
+optional
+kubebuilder:default=100
+kubebuilder:validation:Minimum=1
+kubebuilder:validation:Maximum=1000 */
  recordsHistoryLimit?: number
  /** SuccessThreshold defines the minimum consecutive successes
for the status check to be considered successful.
SuccessThreshold only works for `Synchronous` mode.
+optional
+kubebuilder:default=1
+kubebuilder:validation:Minimum=1 */
  successThreshold?: number
  /** TimeoutSeconds defines the number of seconds after which
an execution of status check times out.
+optional
+kubebuilder:default=1
+kubebuilder:validation:Minimum=1 */
  timeoutSeconds?: number
  /** Type defines the specific status check type.
Support type: HTTP
+kubebuilder:default=HTTP
+kubebuilder:validation:Enum=HTTP */
  type?: string
}

export interface V1alpha1StressCPUSpec {
  /** specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading. */
  load?: number
  /** extend stress-ng options */
  options?: string[]
  /** specifies N workers to apply the stressor. */
  workers?: number
}

export interface V1alpha1StressChaosSpec {
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  /** Duration represents the duration of the chaos action
+optional */
  duration?: string
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  /** StressngStressors defines plenty of stressors just like `Stressors` except that it's an experimental
feature and more powerful. You can define stressors in `stress-ng` (see also `man stress-ng`) dialect,
however not all of the supported stressors are well tested. It maybe retired in later releases. You
should always use `Stressors` to define the stressors and use this only when you want more stressors
unsupported by `Stressors`. When both `StressngStressors` and `Stressors` are defined, `StressngStressors`
wins.
+optional */
  stressngStressors?: string
  stressors?: V1alpha1Stressors
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1StressMemorySpec {
  /** extend stress-ng options */
  options?: string[]
  /** specifies N bytes consumed per vm worker, default is the total available memory.
One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB.. */
  size?: string
}

export interface V1alpha1Stressors {
  cpu?: V1alpha1CPUStressor
  memory?: V1alpha1MemoryStressor
}

export interface V1alpha1Task {
  container?: V1Container
  /** Volumes is a list of volumes that can be mounted by containers in a template.
+patchStrategy=merge
+patchMergeKey=name */
  volumes?: V1Volume[]
}

export interface V1alpha1Template {
  /** AbortWithStatusCheck describe whether to abort the workflow when the failure threshold of StatusCheck is exceeded.
Only used when Type is TypeStatusCheck.
+optional */
  abortWithStatusCheck?: boolean
  awsChaos?: V1alpha1AWSChaosSpec
  azureChaos?: V1alpha1AzureChaosSpec
  blockChaos?: V1alpha1BlockChaosSpec
  /** Children describes the children steps of serial or parallel node. Only used when Type is TypeSerial or TypeParallel.
+optional */
  children?: string[]
  /** ConditionalBranches describes the conditional branches of custom tasks. Only used when Type is TypeTask.
+optional */
  conditionalBranches?: V1alpha1ConditionalBranch[]
  /** +optional */
  deadline?: string
  dnsChaos?: V1alpha1DNSChaosSpec
  gcpChaos?: V1alpha1GCPChaosSpec
  httpChaos?: V1alpha1HTTPChaosSpec
  ioChaos?: V1alpha1IOChaosSpec
  jvmChaos?: V1alpha1JVMChaosSpec
  kernelChaos?: V1alpha1KernelChaosSpec
  name?: string
  networkChaos?: V1alpha1NetworkChaosSpec
  physicalmachineChaos?: V1alpha1PhysicalMachineChaosSpec
  podChaos?: V1alpha1PodChaosSpec
  schedule?: V1alpha1ChaosOnlyScheduleSpec
  statusCheck?: V1alpha1StatusCheckSpec
  stressChaos?: V1alpha1StressChaosSpec
  task?: V1alpha1Task
  templateType?: string
  timeChaos?: V1alpha1TimeChaosSpec
}

export interface V1alpha1TimeChaosSpec {
  /** ClockIds defines all affected clock id
All available options are ["CLOCK_REALTIME","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_THREAD_CPUTIME_ID",
"CLOCK_MONOTONIC_RAW","CLOCK_REALTIME_COARSE","CLOCK_MONOTONIC_COARSE","CLOCK_BOOTTIME","CLOCK_REALTIME_ALARM",
"CLOCK_BOOTTIME_ALARM"]
Default value is ["CLOCK_REALTIME"] */
  clockIds?: string[]
  /** ContainerNames indicates list of the name of affected container.
If not set, the first container will be injected
+optional */
  containerNames?: string[]
  /** Duration represents the duration of the chaos action */
  duration?: string
  /** Mode defines the mode to run chaos action.
Supported mode: one / all / fixed / fixed-percent / random-max-percent
+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent */
  mode?: string
  /** RemoteCluster represents the remote cluster where the chaos will be deployed
+optional */
  remoteCluster?: string
  selector?: V1alpha1PodSelectorSpec
  /** TimeOffset defines the delta time of injected program. It's a possibly signed sequence of decimal numbers, such as
"300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "¬µs"), "ms", "s", "m", "h". */
  timeOffset?: string
  /** Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
If `FixedMode`, provide an integer of pods to do chaos action.
If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
+optional */
  value?: string
}

export interface V1alpha1Timespec {
  nsec?: number
  sec?: number
}

export interface V1alpha1UserDefinedSpec {
  /** The command to be executed when attack */
  attackCmd?: string
  /** The command to be executed when recover */
  recoverCmd?: string
}

export interface V1alpha1VMSpec {
  /** The name of the VM to be injected */
  'vm-name'?: string
}

/**
 * Annotations is an unstructured key value map stored with a resource that may be
set by external tools to store and retrieve arbitrary metadata. They are not
queryable and should be preserved when modifying objects.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
+optional
 */
export type V1alpha1WorkflowAnnotations = { [key: string]: string }

/**
 * Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and services.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
+optional
 */
export type V1alpha1WorkflowLabels = { [key: string]: string }

export interface V1alpha1Workflow {
  /** Annotations is an unstructured key value map stored with a resource that may be
set by external tools to store and retrieve arbitrary metadata. They are not
queryable and should be preserved when modifying objects.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
+optional */
  annotations?: V1alpha1WorkflowAnnotations
  /** APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
+optional */
  apiVersion?: string
  /** CreationTimestamp is a timestamp representing the server time when this object was
created. It is not guaranteed to be set in happens-before order across separate operations.
Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system.
Read-only.
Null for lists.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
+optional */
  creationTimestamp?: string
  /** Number of seconds allowed for this object to gracefully terminate before
it will be removed from the system. Only set when deletionTimestamp is also set.
May only be shortened.
Read-only.
+optional */
  deletionGracePeriodSeconds?: number
  /** DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
field is set by the server when a graceful deletion is requested by the user, and is not
directly settable by a client. The resource is expected to be deleted (no longer visible
from resource lists, and not reachable by name) after the time in this field, once the
finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
Once the deletionTimestamp is set, this value may not be unset or be set further into the
future, although it may be shortened or the resource may be deleted prior to this time.
For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
remove the pod from the API. In the presence of network partitions, this object may still
exist after this timestamp, until an administrator or automated process can determine the
resource is fully terminated.
If not set, graceful deletion of the object has not been requested.

Populated by the system when a graceful deletion is requested.
Read-only.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
+optional */
  deletionTimestamp?: string
  /** Must be empty before the object is deleted from the registry. Each entry
is an identifier for the responsible component that will remove the entry
from the list. If the deletionTimestamp of the object is non-nil, entries
in this list can only be removed.
Finalizers may be processed and removed in any order.  Order is NOT enforced
because it introduces significant risk of stuck finalizers.
finalizers is a shared field, any actor with permission can reorder it.
If the finalizer list is processed in order, then this can lead to a situation
in which the component responsible for the first finalizer in the list is
waiting for a signal (field value, external system, or other) produced by a
component responsible for a finalizer later in the list, resulting in a deadlock.
Without enforced ordering finalizers are free to order amongst themselves and
are not vulnerable to ordering changes in the list.
+optional
+patchStrategy=merge */
  finalizers?: string[]
  /** GenerateName is an optional prefix, used by the server, to generate a unique
name ONLY IF the Name field has not been provided.
If this field is used, the name returned to the client will be different
than the name passed. This value will also be combined with a unique suffix.
The provided value has the same validation rules as the Name field,
and may be truncated by the length of the suffix required to make the value
unique on the server.

If this field is specified and the generated name exists, the server will return a 409.

Applied only if Name is not specified.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
+optional */
  generateName?: string
  /** A sequence number representing a specific generation of the desired state.
Populated by the system. Read-only.
+optional */
  generation?: number
  /** Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
+optional */
  kind?: string
  /** Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and services.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
+optional */
  labels?: V1alpha1WorkflowLabels
  /** ManagedFields maps workflow-id and version to the set of fields
that are managed by that workflow. This is mostly for internal
housekeeping, and users typically shouldn't need to set or
understand this field. A workflow can be the user's name, a
controller's name, or the name of a specific apply path like
"ci-cd". The set of fields is always in the version that the
workflow used when modifying the object.

+optional */
  managedFields?: V1ManagedFieldsEntry[]
  /** Name must be unique within a namespace. Is required when creating resources, although
some resources may allow a client to request the generation of an appropriate name
automatically. Name is primarily intended for creation idempotence and configuration
definition.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
+optional */
  name?: string
  /** Namespace defines the space within which each name must be unique. An empty namespace is
equivalent to the "default" namespace, but "default" is the canonical representation.
Not all objects are required to be scoped to a namespace - the value of this field for
those objects will be empty.

Must be a DNS_LABEL.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
+optional */
  namespace?: string
  /** List of objects depended by this object. If ALL objects in the list have
been deleted, this object will be garbage collected. If this object is managed by a controller,
then an entry in this list will point to this controller, with the controller field set to true.
There cannot be more than one managing controller.
+optional
+patchMergeKey=uid
+patchStrategy=merge */
  ownerReferences?: V1OwnerReference[]
  /** An opaque value that represents the internal version of this object that can
be used by clients to determine when objects have changed. May be used for optimistic
concurrency, change detection, and the watch operation on a resource or set of resources.
Clients must treat these values as opaque and passed unmodified back to the server.
They may only be valid for a particular resource or set of resources.

Populated by the system.
Read-only.
Value must be treated as opaque by clients and .
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
+optional */
  resourceVersion?: string
  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
+optional */
  selfLink?: string
  spec?: V1alpha1WorkflowSpec
  status?: V1alpha1WorkflowStatus
  /** UID is the unique in time and space value for this object. It is typically generated by
the server on successful creation of a resource and is not allowed to change on PUT
operations.

Populated by the system.
Read-only.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
+optional */
  uid?: string
}

export interface V1alpha1WorkflowCondition {
  reason?: string
  startTime?: string
  status?: string
  type?: string
}

export interface V1alpha1WorkflowSpec {
  entry?: string
  templates?: V1alpha1Template[]
}

export interface V1alpha1WorkflowStatus {
  /** Represents the latest available observations of a workflow's current state.
+optional
+patchMergeKey=type
+patchStrategy=merge */
  conditions?: V1alpha1WorkflowCondition[]
  /** +optional */
  endTime?: string
  /** +optional */
  entryNode?: string
  /** +optional */
  startTime?: string
}

/**
 * Request body
 */
export type V1alpha1WorkflowBody = V1alpha1Workflow

/**
 * Rendered Task
 */
export type V1alpha1TemplateBody = V1alpha1Template

export type DeleteArchivesParams = {
  /**
   * uids
   */
  uids: string
}

export type GetArchivesParams = {
  /**
   * namespace
   */
  namespace?: string
  /**
   * name
   */
  name?: string
  /**
   * kind
   */
  kind?: GetArchivesKind
}

export type GetArchivesKind = (typeof GetArchivesKind)[keyof typeof GetArchivesKind]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetArchivesKind = {
  PodChaos: 'PodChaos',
  IOChaos: 'IOChaos',
  NetworkChaos: 'NetworkChaos',
  TimeChaos: 'TimeChaos',
  KernelChaos: 'KernelChaos',
  StressChaos: 'StressChaos',
} as const

export type DeleteArchivesSchedulesParams = {
  /**
   * uids
   */
  uids: string
}

export type GetArchivesSchedulesParams = {
  /**
   * namespace
   */
  namespace?: string
  /**
   * name
   */
  name?: string
}

export type DeleteArchivesWorkflowsParams = {
  /**
   * uids
   */
  uids: string
}

export type GetArchivesWorkflowsParams = {
  /**
   * namespace
   */
  namespace?: string
  /**
   * name
   */
  name?: string
}

export type GetCommonAnnotationsParams = {
  /**
   * The pod's namespace list, split by ,
   */
  podNamespaceList: string
}

export type GetCommonLabelsParams = {
  /**
   * The pod's namespace list, split by ,
   */
  podNamespaceList: string
}

export type GetCommonPhysicalmachineAnnotationsParams = {
  /**
   * The physicalMachine's namespace list, split by ,
   */
  physicalMachineNamespaceList: string
}

export type GetCommonPhysicalmachineLabelsParams = {
  /**
   * The physicalMachine's namespace list, split by ,
   */
  physicalMachineNamespaceList: string
}

export type GetCommonRbacConfigParams = {
  /**
   * The namespace of RBAC
   */
  namespace?: string
  /**
   * The role of RBAC
   */
  role?: string
}

export type GetCommonRbacConfig200 = { [key: string]: string }

export type GetEventsParams = {
  /**
   * The create time of events
   */
  created_at?: string
  /**
   * The name of the object
   */
  name?: string
  /**
   * The namespace of the object
   */
  namespace?: string
  /**
   * The UID of the object
   */
  object_id?: string
  /**
   * kind
   */
  kind?: GetEventsKind
  /**
   * The max length of events list
   */
  limit?: number
}

export type GetEventsKind = (typeof GetEventsKind)[keyof typeof GetEventsKind]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEventsKind = {
  PodChaos: 'PodChaos',
  IOChaos: 'IOChaos',
  NetworkChaos: 'NetworkChaos',
  TimeChaos: 'TimeChaos',
  KernelChaos: 'KernelChaos',
  StressChaos: 'StressChaos',
  AWSChaos: 'AWSChaos',
  GCPChaos: 'GCPChaos',
  DNSChaos: 'DNSChaos',
  Schedule: 'Schedule',
} as const

export type GetEventsWorkflowUidParams = {
  /**
   * The namespace of the object
   */
  namespace?: string
  /**
   * The max length of events list
   */
  limit?: number
}

export type DeleteExperimentsParams = {
  /**
   * the experiment uids, split with comma. Example: ?uids=uid1,uid2
   */
  uids: string
  /**
   * force
   */
  force?: DeleteExperimentsForce
}

export type DeleteExperimentsForce = (typeof DeleteExperimentsForce)[keyof typeof DeleteExperimentsForce]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteExperimentsForce = {
  true: 'true',
  false: 'false',
} as const

export type GetExperimentsParams = {
  /**
   * filter exps by namespace
   */
  namespace?: string
  /**
   * filter exps by name
   */
  name?: string
  /**
   * filter exps by kind
   */
  kind?: GetExperimentsKind
  /**
   * filter exps by status
   */
  status?: GetExperimentsStatus
}

export type GetExperimentsKind = (typeof GetExperimentsKind)[keyof typeof GetExperimentsKind]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetExperimentsKind = {
  PodChaos: 'PodChaos',
  NetworkChaos: 'NetworkChaos',
  IOChaos: 'IOChaos',
  StressChaos: 'StressChaos',
  KernelChaos: 'KernelChaos',
  TimeChaos: 'TimeChaos',
  DNSChaos: 'DNSChaos',
  AWSChaos: 'AWSChaos',
  GCPChaos: 'GCPChaos',
  JVMChaos: 'JVMChaos',
  HTTPChaos: 'HTTPChaos',
} as const

export type GetExperimentsStatus = (typeof GetExperimentsStatus)[keyof typeof GetExperimentsStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetExperimentsStatus = {
  Injecting: 'Injecting',
  Running: 'Running',
  Finished: 'Finished',
  Paused: 'Paused',
} as const

export type PostExperimentsBody = { [key: string]: unknown }

export type PostExperiments200 = { [key: string]: unknown }

export type DeleteExperimentsUidParams = {
  /**
   * force
   */
  force?: DeleteExperimentsUidForce
}

export type DeleteExperimentsUidForce = (typeof DeleteExperimentsUidForce)[keyof typeof DeleteExperimentsUidForce]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteExperimentsUidForce = {
  true: 'true',
  false: 'false',
} as const

export type GetExperimentsStateParams = {
  /**
   * namespace
   */
  namespace?: string
}

export type DeleteSchedulesParams = {
  /**
   * the schedule uids, split with comma. Example: ?uids=uid1,uid2
   */
  uids: string
}

export type GetSchedulesParams = {
  /**
   * filter schedules by namespace
   */
  namespace?: string
  /**
   * filter schedules by name
   */
  name?: string
}

export type GetTemplatesStatuschecksParams = {
  /**
   * filter status check templates by namespace
   */
  namespace?: string
  /**
   * filter status check templates by name
   */
  name?: string
}

export type DeleteTemplatesStatuschecksStatuscheckParams = {
  /**
   * the namespace of status check templates
   */
  namespace: string
  /**
   * the name of status check templates
   */
  name: string
}

export type GetTemplatesStatuschecksStatuscheckParams = {
  /**
   * the namespace of status check templates
   */
  namespace: string
  /**
   * the name of status check templates
   */
  name: string
}

export type GetWorkflowsParams = {
  /**
   * namespace, given empty string means list from all namespace
   */
  namespace?: string
  /**
   * status
   */
  status?: GetWorkflowsStatus
}

export type GetWorkflowsStatus = (typeof GetWorkflowsStatus)[keyof typeof GetWorkflowsStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetWorkflowsStatus = {
  Initializing: 'Initializing',
  Running: 'Running',
  Errored: 'Errored',
  Finished: 'Finished',
} as const
