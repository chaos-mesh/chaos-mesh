---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: kernelchaos.chaos-mesh.org
spec:
  group: chaos-mesh.org
  names:
    kind: KernelChaos
    listKind: KernelChaosList
    plural: kernelchaos
    singular: kernelchaos
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.duration
      name: duration
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: KernelChaos is the Schema for the kernelchaos API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the behavior of a kernel chaos experiment
            properties:
              containerNames:
                description: |-
                  ContainerNames indicates list of the name of affected container.
                  If not set, the first container will be injected
                items:
                  type: string
                type: array
              duration:
                description: Duration represents the duration of the chaos action
                type: string
              failKernRequest:
                description: FailKernRequest defines the request of kernel injection
                properties:
                  callchain:
                    description: |-
                      Callchain indicate a special call chain, such as:
                          ext4_mount
                            -> mount_subtree
                               -> ...
                                  -> should_failslab
                      With an optional set of predicates and an optional set of
                      parameters, which used with predicates. You can read call chan
                      and predicate examples from https://github.com/chaos-mesh/bpfki/tree/develop/examples
                      to learn more.
                      If no special call chain, just keep Callchain empty, which means it will fail at any call chain
                      with slab alloc (eg: kmalloc).
                    items:
                      description: Frame defines the function signature and predicate
                        in function's body
                      properties:
                        funcname:
                          description: Funcname can be find from kernel source or
                            `/proc/kallsyms`, such as `ext4_mount`
                          type: string
                        parameters:
                          description: |-
                            Parameters is used with predicate, for example, if you want to inject slab error
                            in `d_alloc_parallel(struct dentry *parent, const struct qstr *name)` with a special
                            name `bananas`, you need to set it to `struct dentry *parent, const struct qstr *name`
                            otherwise omit it.
                          type: string
                        predicate:
                          description: |-
                            Predicate will access the arguments of this Frame, example with Parameters's, you can
                            set it to `STRNCMP(name->name, "bananas", 8)` to make inject only with it, or omit it
                            to inject for all d_alloc_parallel call chain.
                          type: string
                      type: object
                    type: array
                  failtype:
                    description: |-
                      FailType indicates what to fail, can be set to '0' / '1' / '2'
                      If `0`, indicates slab to fail (should_failslab)
                      If `1`, indicates alloc_page to fail (should_fail_alloc_page)
                      If `2`, indicates bio to fail (should_fail_bio)
                      You can read:
                        1. https://www.kernel.org/doc/html/latest/fault-injection/fault-injection.html
                        2. http://github.com/iovisor/bcc/blob/master/tools/inject_example.txt
                      to learn more
                    format: int32
                    maximum: 2
                    minimum: 0
                    type: integer
                  headers:
                    description: |-
                      Headers indicates the appropriate kernel headers you need.
                      Eg: "linux/mmzone.h", "linux/blkdev.h" and so on
                    items:
                      type: string
                    type: array
                  probability:
                    description: |-
                      Probability indicates the fails with probability.
                      If you want 1%, please set this field with 1.
                    format: int32
                    maximum: 100
                    minimum: 0
                    type: integer
                  times:
                    description: Times indicates the max times of fails.
                    format: int32
                    minimum: 0
                    type: integer
                required:
                - failtype
                type: object
              mode:
                description: |-
                  Mode defines the mode to run chaos action.
                  Supported mode: one / all / fixed / fixed-percent / random-max-percent
                enum:
                - one
                - all
                - fixed
                - fixed-percent
                - random-max-percent
                type: string
              remoteCluster:
                description: RemoteCluster represents the remote cluster where the
                  chaos will be deployed
                type: string
              selector:
                description: Selector is used to select pods that are used to inject
                  chaos action.
                properties:
                  annotationSelectors:
                    additionalProperties:
                      type: string
                    description: |-
                      Map of string keys and values that can be used to select objects.
                      A selector based on annotations.
                    type: object
                  expressionSelectors:
                    description: |-
                      a slice of label selector expressions that can be used to select objects.
                      A list of selectors based on set-based label expressions.
                    items:
                      description: |-
                        A label selector requirement is a selector that contains values, a key, and an operator that
                        relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: |-
                            operator represents a key's relationship to a set of values.
                            Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: |-
                            values is an array of string values. If the operator is In or NotIn,
                            the values array must be non-empty. If the operator is Exists or DoesNotExist,
                            the values array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  fieldSelectors:
                    additionalProperties:
                      type: string
                    description: |-
                      Map of string keys and values that can be used to select objects.
                      A selector based on fields.
                    type: object
                  labelSelectors:
                    additionalProperties:
                      type: string
                    description: |-
                      Map of string keys and values that can be used to select objects.
                      A selector based on labels.
                    type: object
                  namespaces:
                    description: Namespaces is a set of namespace to which objects
                      belong.
                    items:
                      type: string
                    type: array
                  nodeSelectors:
                    additionalProperties:
                      type: string
                    description: |-
                      Map of string keys and values that can be used to select nodes.
                      Selector which must match a node's labels,
                      and objects must belong to these selected nodes.
                    type: object
                  nodes:
                    description: Nodes is a set of node name and objects must belong
                      to these nodes.
                    items:
                      type: string
                    type: array
                  podPhaseSelectors:
                    description: |-
                      PodPhaseSelectors is a set of condition of a pod at the current time.
                      supported value: Pending / Running / Succeeded / Failed / Unknown
                    items:
                      type: string
                    type: array
                  pods:
                    additionalProperties:
                      items:
                        type: string
                      type: array
                    description: |-
                      Pods is a map of string keys and a set values that used to select pods.
                      The key defines the namespace which pods belong,
                      and the each values is a set of pod names.
                    type: object
                type: object
              value:
                description: |-
                  Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.
                  If `FixedMode`, provide an integer of pods to do chaos action.
                  If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.
                  IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
                type: string
            required:
            - failKernRequest
            - mode
            - selector
            type: object
          status:
            description: Most recently observed status of the kernel chaos experiment
            properties:
              conditions:
                description: Conditions represents the current global condition of
                  the chaos
                items:
                  properties:
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              experiment:
                description: Experiment records the last experiment state.
                properties:
                  containerRecords:
                    description: Records are used to track the running status
                    items:
                      properties:
                        events:
                          description: Events are the essential details about the
                            injections and recoveries
                          items:
                            properties:
                              message:
                                description: Message is the detail message, e.g. the
                                  reason why we failed to inject the chaos
                                type: string
                              operation:
                                description: Operation represents the operation we
                                  are doing, when we crate this event
                                type: string
                              timestamp:
                                description: Timestamp is time when we create this
                                  event
                                format: date-time
                                type: string
                              type:
                                description: Type means the stage of this event
                                type: string
                            required:
                            - operation
                            - timestamp
                            - type
                            type: object
                          type: array
                        id:
                          type: string
                        injectedCount:
                          description: InjectedCount is a counter to record the sum
                            of successful injections
                          type: integer
                        phase:
                          type: string
                        recoveredCount:
                          description: RecoveredCount is a counter to record the sum
                            of successful recoveries
                          type: integer
                        selectorKey:
                          type: string
                      required:
                      - id
                      - injectedCount
                      - phase
                      - recoveredCount
                      - selectorKey
                      type: object
                    type: array
                  desiredPhase:
                    enum:
                    - Run
                    - Stop
                    type: string
                type: object
            required:
            - experiment
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
