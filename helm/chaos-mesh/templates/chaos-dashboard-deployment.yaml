# Copyright 2021 Chaos Mesh Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

{{- if .Values.dashboard.create }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: chaos-dashboard
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-dashboard
spec:
  replicas: {{ .Values.dashboard.replicaCount }}
  strategy:
    {{- if .Values.dashboard.persistentVolume.enabled }}
    type: Recreate
    {{- else }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    {{- end }}
  selector:
    matchLabels:
      {{- include "chaos-mesh.selectors" . | nindent 6 }}
      app.kubernetes.io/component: chaos-dashboard
  template:
    metadata:
      labels:
        {{- include "chaos-mesh.labels" . | nindent 8 }}
        app.kubernetes.io/component: chaos-dashboard
      annotations:
    {{- with .Values.dashboard.podAnnotations }}
{{ toYaml . | indent 8 }}
    {{- end }}
    spec:
      securityContext:
{{ toYaml .Values.dashboard.securityContext | indent 12 }}
      {{- if .Values.dashboard.hostNetwork }}
      hostNetwork: true
      {{- end }}
      {{- if .Values.dashboard.serviceAccount }}
      serviceAccountName: {{ .Values.dashboard.serviceAccount }}
      {{- end }}
      {{- if .Values.dashboard.priorityClassName }}
      priorityClassName: {{ .Values.dashboard.priorityClassName }}
      {{- end }}
      {{- if .Values.chaosDlv.enable }}
      shareProcessNamespace: true
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: chaos-dashboard
          image: {{template "chaos-dashboard.image" . }}
          imagePullPolicy: {{ .Values.dashboard.imagePullPolicy | default "IfNotPresent" }}
          resources:
{{ toYaml .Values.dashboard.resources | indent 12 }}
          command:
            - /usr/local/bin/chaos-dashboard
          env:
            {{- if .Values.dashboard.env }}
            {{- include "chaos-mesh.helpers.listEnvVars" .Values.dashboard | trim | nindent 12 }}
            {{- end }}
            {{- if not .Values.dashboard.env.TZ }}
            - name: TZ
              value: {{ .Values.timezone | default "UTC" }}
            {{- end }}
            - name: CLUSTER_SCOPED
              value: "{{ .Values.clusterScoped }}"
            - name: TARGET_NAMESPACE
              value: {{ .Values.controllerManager.targetNamespace | quote }}
            - name: ENABLE_FILTER_NAMESPACE
              value: "{{ .Values.controllerManager.enableFilterNamespace }}"
            - name: SECURITY_MODE
              value: "{{ .Values.dashboard.securityMode }}"
            - name: GCP_SECURITY_MODE
              value: "{{ .Values.dashboard.gcpSecurityMode.enabled }}"
            {{- if not .Values.dashboard.gcpSecurityMode.existingSecret }}
            - name: GCP_CLIENT_ID
              value: "{{ .Values.dashboard.gcpSecurityMode.clientId }}"
            - name: GCP_CLIENT_SECRET
              value: "{{ .Values.dashboard.gcpSecurityMode.clientSecret }}"
            {{- end }}
            - name: DNS_SERVER_CREATE
              value: "{{ .Values.dnsServer.create }}"
            - name: ROOT_URL
              value: "{{ tpl .Values.dashboard.rootUrl . }}"
            - name: ENABLE_PROFILING
              value: "{{ .Values.enableProfiling }}"
            {{- if .Values.dashboard.databaseSecretName }}
            - name: DATABASE_DATASOURCE
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.dashboard.databaseSecretName }}"
                  key: DATABASE_DATASOURCE
            {{- end }}
          {{- if .Values.dashboard.gcpSecurityMode.existingSecret }}
          envFrom:
            - secretRef:
                name: "{{ .Values.dashboard.gcpSecurityMode.existingSecret }}"
          {{- end }}
          volumeMounts:
            - name: storage-volume
              mountPath: {{ .Values.dashboard.persistentVolume.mountPath }}
              subPath: "{{ .Values.dashboard.persistentVolume.subPath }}"
          ports:
            - name: http
              containerPort: {{ .Values.dashboard.env.LISTEN_PORT }}
            - name: metric
              containerPort: {{ .Values.dashboard.env.METRIC_PORT }}
        {{- if .Values.chaosDlv.enable }}
        - name: chaos-mesh-dlv
          image: {{template "chaos-dlv.image" . }}
          imagePullPolicy: {{ .Values.chaosDlv.imagePullPolicy | default "IfNotPresent" }}
          env:
            - name: CMD_NAME
              value: chaos-dashboard
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          ports:
          - name: dlv
            containerPort: 8000
        {{- end }}
        {{- with .Values.dashboard.extraContainers }}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        {{- with .Values.dashboard.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.dashboard.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.dashboard.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      volumes:
      - name: storage-volume
      {{- if .Values.dashboard.persistentVolume.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.dashboard.persistentVolume.existingClaim }}{{ .Values.dashboard.persistentVolume.existingClaim }}{{- else }}{{ template "chaos-mesh.name" . }}-chaos-dashboard{{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: {{ template "chaos-dashboard.svc" . }}
  labels:
    app.kubernetes.io/name: {{ template "chaos-mesh.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: chaos-dashboard
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+"  "_" }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.dashboard.env.METRIC_PORT }}"
{{- with .Values.dashboard.service.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  selector:
    app.kubernetes.io/name: {{ template "chaos-mesh.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: chaos-dashboard
  type: {{ .Values.dashboard.service.type }}
{{- if and .Values.dashboard.service.clusterIP (eq .Values.dashboard.service.type "ClusterIP") }}
  clusterIP: {{ .Values.dashboard.service.clusterIP }}
{{- end }}
  ports:
    - protocol: TCP
      port: {{ .Values.dashboard.env.LISTEN_PORT }}
      targetPort: {{ .Values.dashboard.env.LISTEN_PORT }}
      name: http
{{- if and .Values.dashboard.service.nodePort (eq .Values.dashboard.service.type "NodePort") }}
      nodePort: {{ .Values.dashboard.service.nodePort }}
{{- end }}
  {{- if .Values.chaosDlv.enable }}
    - port: 8000
      targetPort: dlv
      protocol: TCP
      name: dlv
  {{- end }}
    - protocol: TCP
      port: {{ .Values.dashboard.env.METRIC_PORT }}
      targetPort: {{ .Values.dashboard.env.METRIC_PORT }}
      name: metric
{{- if and .Values.dashboard.service.type (eq .Values.dashboard.service.type "LoadBalancer") .Values.dashboard.service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
{{- with .Values.dashboard.service.loadBalancerSourceRanges }}
{{- toYaml . | nindent 4 }}
{{- end }}
{{- end }}
{{- end }}
